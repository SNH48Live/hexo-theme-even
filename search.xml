<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[转投 Neovim]]></title>
      <url>http://www.ahonn.me/2017/03/27/use-neovim/</url>
      <content type="html"><![CDATA[<p>很久之前就听说过 Neovim，但一直没有怎么了解过。昨天下午折腾了一下，彻底转投 Neovim 了。</p>
<p>虽然说这两货的差别目前还不是很大，但是 Neovim 实现了嵌入式终端模拟器，Excited! 各种 REPL 插件统统都可以卸载了！</p>
<a id="more"></a>
<h2 id="迁移配置文件"><a href="#迁移配置文件" class="headerlink" title="迁移配置文件"></a>迁移配置文件</h2><p>Neovim 配置完全兼容原来的 <code>.vimrc</code>，只需要：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p <span class="variable">$&#123;XDG_CONFIG_HOME:=$HOME/.config&#125;</span></div><div class="line">ln <span class="_">-s</span> ~/.vim <span class="variable">$XDG_CONFIG_HOME</span>/nvim</div><div class="line">ln <span class="_">-s</span> ~/.vimrc <span class="variable">$XDG_CONFIG_HOME</span>/nvim/init.vim</div></pre></td></tr></table></figure>
<h2 id="使用-ale-代替-syntastic"><a href="#使用-ale-代替-syntastic" class="headerlink" title="使用 ale 代替 syntastic"></a>使用 ale 代替 syntastic</h2><p>老早就觉得 <code>syntastic</code> 同步检查代码好难用，这下换成 <code>ale</code> 舒服多了。有之前使用 atom 时自带的代码检查的感觉。</p>
<p>(Vim 8 好像也已经提供了异步 API，但是我等到换成 Neovim 才知道..)</p>
<h2 id="把-Leader-改成空格"><a href="#把-Leader-改成空格" class="headerlink" title="把 Leader 改成空格"></a>把 Leader 改成空格</h2><p>其实是看了 <a href="https://zhuanlan.zhihu.com/p/25905625" target="_blank" rel="external">Vim 高效率配置导论</a> 这篇文章之后试着改的，改完发现空格比起原先的 <code>,</code> 好用多了。让大拇指动了起来。</p>
<p>然后切换 buffter 的快捷键就映射成了 <code>&lt;Space&gt; + n/m</code>，简直不要太顺手。</p>
<h2 id="使用-Spacegray-主题"><a href="#使用-Spacegray-主题" class="headerlink" title="使用 Spacegray 主题"></a>使用 Spacegray 主题</h2><p>之前使用的 <code>molokai</code> 看久了有点视觉疲劳，发现之前在用 <code>sublime text</code> 时使用的 <code>Spacegray</code> 也有 Vim 版本，果断换之。（折腾高亮主题是永恒的.. ）</p>
<h2 id="优化难用的缩进调整"><a href="#优化难用的缩进调整" class="headerlink" title="优化难用的缩进调整"></a>优化难用的缩进调整</h2><p>在 Visual 模式下调整缩进很不好用，<code>v&gt;</code> 之后又得重新选中，虽然说可以 <code>v3&gt;</code> 之类的，但是需要去计算多少个缩进，看起来并不是很明显。</p>
<p>遂，添加了下面这两个 mapping：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vnoremap &lt; &lt;v</div><div class="line">vnoremap &gt; &gt;v</div></pre></td></tr></table></figure>
<p>这样映射之后我就可以 <code>v&gt;&gt;&gt;</code> 去缩进了，好用到不行！</p>
<h2 id="Vim-使用总结"><a href="#Vim-使用总结" class="headerlink" title="Vim 使用总结"></a>Vim 使用总结</h2><p>使用 Vim 也差不多一个来月了，越来越发现 Vim 的便利之处，虽然说折腾配置插件花的时间会久一点。但是折腾完之后效率提高还是蛮多的，以至于现在在别的编辑器里下意识的用 Vim 模式，发现没有之后用方向键或者鼠标去移动都觉得超级慢。</p>
<p>开始理解 Vim 学习路线那张图表的意思了～</p>
<blockquote>
<p>我的 Vim 配置：<a href="https://github.com/ahonn/vimrc" target="_blank" rel="external">vimrc</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴暑假实习面试总结]]></title>
      <url>http://www.ahonn.me/2017/03/16/alibaba-summer-internship-interview-summary/</url>
      <content type="html"><![CDATA[<p>2月末的时候，通过 <a href="https://simplyy.space/" target="_blank" rel="external">simplyY</a> 内推了阿里巴巴暑期实习的前端开发岗，在此表示感谢。<br>接着3月1号收到了内推的通知邮件，完善信息后很快就接到了一面的电话（3月3号）。</p>
<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>面试了大概20分钟左右，整体内容还是比较偏基础。一开始是正常流程的自我介绍，说是三分钟自我介绍，但是我语速比较快的不到两分钟的介绍完了。(刚好是临近中午，原本打算吃饭的，要是去吃饭的话就得在路上面了…）</p>
<h3 id="CSS-垂直居中"><a href="#CSS-垂直居中" class="headerlink" title="CSS 垂直居中"></a>CSS 垂直居中</h3><p>这个写过一篇博文专门总结过，不过面试的时候还是太过紧张没有答全。主要是 Flexbox 布局的垂直居中比较容易忘记。</p>
<p>具体就不再啰嗦了，详情可以查看：<a href="http://www.ahonn.me/2016/06/29/vertical-center-for-css/">CSS 实现垂直居中</a></p>
<a id="more"></a>
<h3 id="call-与-apply-的区别，以及性能差别"><a href="#call-与-apply-的区别，以及性能差别" class="headerlink" title="call 与 apply 的区别，以及性能差别"></a>call 与 apply 的区别，以及性能差别</h3><p><code>call</code> 与 <code>apply</code> 的区别，这是一个老生常谈的面试题了。<code>call()</code> 与 <code>apply()</code> 都是用于在指定 this 值与参数的情况下调用函数，主要的区别在于除了传入 this 值之外，<code>apply()</code> 接收类数组或者类数组对象来作为调用的函数的参数，而 <code>call()</code> 则是需要分别传入函数的每一个参数（除第一个参数之外的其他参数）。</p>
<blockquote>
<p>call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来。—— 『JavaScript 高级程序设计』</p>
</blockquote>
<p>区别的话基本上只要看过书或者刷过面试题都会知道，但 <code>call()</code> 与 <code>apply()</code> 之间的性能差别就不是那么常见了。<br>比较幸运的是，之前在阅读 underscore 源码的时候有注意到这个细节，为此也写过另外的文章：<a href="http://www.ahonn.me/2016/05/03/starting-from-the-optimizeCb/">从 optimizeCb 说起</a>。</p>
<p>实践证明，在知道调用函数的参数数量时，使用 <code>call()</code> 的性能会优于 <code>apply()</code>。主要在实现的过程中 <code>apply()</code> 需要完成额外的操作（判断第二个参数类数组的长度，etc.）。具体为什么有这种差别，可以在 ECMAScript Language Specification 中查看 <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3" target="_blank" rel="external">Function.prototype.apply</a> 与 <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.4" target="_blank" rel="external">Function.prototype.call</a> 的具体实现差异。</p>
<p><strong>参考链接</strong></p>
<ul>
<li><a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply" target="_blank" rel="external">javascript - What is the difference between call and apply? - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/23769556/why-is-call-so-much-faster-than-apply" target="_blank" rel="external">javascript - Why is call so much faster than apply? - Stack Overflow</a></li>
<li><a href="https://jsperf.com/call-apply-segu" target="_blank" rel="external">call vs apply · jsPerf</a></li>
</ul>
<h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>又是一个老生常谈的问题。我的理解比较肤浅，就是 A 函数返回 B 函数，B 函数能够访问 A 函数中的局部变量，使得在 A 外部的作用域中能够使用 B 函数间接操作 A 函数中的局部变量，这样就形成了一个闭包。A 函数中的局部变量与返回的 B 函数一同存在，不会被垃圾回收机制清理（引用还存在）。</p>
<blockquote>
<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。—— 维基百科</p>
</blockquote>
<p>建议阅读 <a href="https://book.douban.com/subject/26351021/" target="_blank" rel="external">『你不知道的 JavaScript（上卷）』</a> 中有关作用域与闭包的部分。</p>
<h3 id="什么是尾递归"><a href="#什么是尾递归" class="headerlink" title="什么是尾递归"></a>什么是尾递归</h3><blockquote>
<p>在计算机科学里，尾调用是指一个函数里的最后一个动作是一个函数调用的情形：即这个调用的返回值直接被当前函数返回的情形。这种情形下称该调用位置为尾位置。若这个函数在尾位置调用本身（或是一个尾调用本身的其他函数等等），则称这种情况为尾递归，是递归的一种特殊情形。—— 维基百科</p>
</blockquote>
<p>一般递归实现阶乘：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般递归需要中栈上维护函数的调用信息直到函数返回后才释放，容易发生『栈溢出』错误。但对于尾递归来说，只需要维护一个调用记录。</p>
<p>尾递归实现阶乘：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> fact-iter(n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>-<span class="title">iter</span>(<span class="params">n, a</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> fact-iter(n - <span class="number">1</span>, n * a);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于递归与尾递归，在 <a href="https://book.douban.com/subject/1148282/" target="_blank" rel="external">『计算机程序的构造和解释』</a>中也有类似的讨论。</p>
<h3 id="React-的设计理念"><a href="#React-的设计理念" class="headerlink" title="React 的设计理念"></a>React 的设计理念</h3><p>这部分答得不是很好，只提到了组件化，单向数据流，Virtual DOM 之类的。</p>
<p>有关 React 的设计思想可以参考这一篇文章：<a href="https://github.com/react-guide/react-basic" target="_blank" rel="external">React 设计思想</a>。</p>
<h3 id="前端安全（攻击方式与如何防范）"><a href="#前端安全（攻击方式与如何防范）" class="headerlink" title="前端安全（攻击方式与如何防范）"></a>前端安全（攻击方式与如何防范）</h3><p>第一反应就是 <code>XSS</code> 与 <code>CSRF</code>，<code>XSS</code> 可以通过对输入数据进行转义来防范，而 <code>CSRF</code> 则通过使用 SSL 链接访问资源或者请求中添加验证码来进行防范。</p>
<p>除此之外我漏掉了网络劫持，控制台注入代码等攻击方式，这里有篇文章做了详细介绍：<a href="https://segmentfault.com/a/1190000006672214" target="_blank" rel="external">聊一聊WEB前端安全那些事儿</a>。</p>
<h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>第一次远程视频面试，好紧张。</p>
<p>一开始问了 CSS 中 position 属性的 absolute 的作用以及应用场景，这个基本上没有什么问题。接着叫我拿纸写冒泡排序（手写 T-T），飞快的写完。<br>然后跟一面一样也问了前端安全相关的问题，一下子都不紧张了.. 没有想象中的难。</p>
<h3 id="实现-bind-函数"><a href="#实现-bind-函数" class="headerlink" title="实现 bind 函数"></a>实现 bind 函数</h3><p>同样是让我写代码，同样是手写（T-T）。这个问题对我来说不算难，不过只是写了简单的实现，没有考虑其他情况。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本原理就是使用 <code>apply()</code> 与闭包，返回包含 <code>apply()</code> 的闭包使得 <code>apply()</code> 绑定指定作用域，但并未执行。</p>
<h3 id="阅读-Underscore-源码的经历"><a href="#阅读-Underscore-源码的经历" class="headerlink" title="阅读 Underscore 源码的经历"></a>阅读 Underscore 源码的经历</h3><p>之前拖拖拉拉的阅读完了 Underscore 的源码，并提交了一个小 <a href="https://github.com/jashkenas/underscore/pull/2630" target="_blank" rel="external">Pull Request</a>。</p>
<p>在阅读的过程中学到了许多的东西，例如上面提到的 call 与 apply 的性能差别，除此之外还有如何去判断变量的类型，以及如何判断两个变量是否相等，等等。另外也了解到许多闭包的使用场景。</p>
<h3 id="阅读其他类库的收获"><a href="#阅读其他类库的收获" class="headerlink" title="阅读其他类库的收获"></a>阅读其他类库的收获</h3><p>除了 Underscore 之外还阅读过一点 Bootstrap 和 jQuery，这个博客主题的样式部分的组织方式就是参考了 Bootstrap 的组织方式，另外也稍微阅读过 jQuery中 <code>$.ajax</code> 以及事件相关的源码。</p>
<p>在阅读代码的过程中的收获就是学习了一些组织代码的方式，还有如何写才能有利于拓展，更加健壮。其中也学到了一些提高性能的技巧，函数缓存，事件队列之类的。</p>
<h3 id="博客主题的开发经历"><a href="#博客主题的开发经历" class="headerlink" title="博客主题的开发经历"></a>博客主题的开发经历</h3><p>其实一开始写主题只是想给自己用，之后发现蛮多人也喜欢我这个主题的，并时不时有人中 Github 上提 Issue，这对我是莫大的鼓励。虽然我水平并不是很高，但是写出来的东西有人用感觉真的是特别开心，也特别有动力去改进。</p>
<p>从开始去写主题到现在差不多也一年了，这一年中我从前端小白变成前端大白。在维护的过程中学习到很多东西，虽然目前写得也不是很好，但是我还是会慢慢改进继续维护下去的。</p>
<p>维护的过程中的收获就是，当站在自己的角度看问题与在别人的角度看完全是不一样的，或许有个功能我并不需要，但是有人提了，我就得站在『用户』的角度去思考，去实现。『用户』只关心能不能用，好不好用，而并不关心代码写得怎么样。</p>
<h3 id="实习期间遇到得难题"><a href="#实习期间遇到得难题" class="headerlink" title="实习期间遇到得难题"></a>实习期间遇到得难题</h3><p>可能我做的工作相对简单，就算不会，基本上靠搜索引擎都能够解决。<strong>我觉得能用 Google 解决的问题不算难题。</strong>以我现在的水平，还达不到遇到的难题 Google 搜索不到的😹</p>
<h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>三面基本上没有问太过具体的前端相关的问题，大部分是在聊聊看法，聊聊项目。</p>
<p>开始让我用纸画出博客的设计，其实主要还是主题，没什么难度，毕竟代码都是我自己写的。</p>
<p>然后让我介绍一下我熟悉的一个框架，说的 React，提及到了 Vitrual DOM 和 diff 算法，说了一下 diff 算法的大概策略。还有说到组件化，单向数据流等等。幸运的是，我在二面之前刷了 『深入 React 技术栈』这本书，结合之前的实践能够说个大概。</p>
<p>中间有聊到兴趣爱好，我想了想好像只有写代码。听歌应该也算？写代码的时候必定要听歌。我记得去年国庆有一天从起床写到晚上睡觉，差不多写了 11 个小时，那时候正在折腾 React 与 Meteor。我自己都觉得不可思议。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能是运气问题，我觉得我的这几面难度都不高😹。得益于看的书，好多知识点都是书上有的。基本上基础的前端面试题都可以在红宝书上找到，真不愧为前端面试宝典。另外 Github 上的这个博客主题也帮了很大的忙，300+ star 果然还是有点用处的（虽然说 star 不能代表什么，而且的确写得也很水，但作用不可否认）。</p>
<p>最后，基础很重要，基础扎实是基本。但是如果想要有突出的表现还是需要更有深度的研究。需要经常思考总结，不仅仅是浮于表面，更要深入原理。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 实习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[答前端面试题]]></title>
      <url>http://www.ahonn.me/2017/03/11/answer-front-end-questions/</url>
      <content type="html"><![CDATA[<blockquote>
<p>答 <a href="https://zhuanlan.zhihu.com/p/25701897" target="_blank" rel="external">中级前端工程师面试 我想问的几个问题</a> 中的几个问题，感谢 <a href="https://www.zhihu.com/people/simplyy/answers" target="_blank" rel="external">@SimplyY
</a></p>
</blockquote>
<h2 id="我最大的优势以及为什么选择前端"><a href="#我最大的优势以及为什么选择前端" class="headerlink" title="我最大的优势以及为什么选择前端"></a>我最大的优势以及为什么选择前端</h2><ul>
<li>我最大的优势是自学能力与理解能力强，并且不给自己套上『我是前端程序员』的枷锁，对于所有技术保持好奇心，不畏惧舒适圈外的事物并敢于尝试。</li>
<li>选择前端的理由是，前端能够迅速的把想法实现，可选技术栈广泛（Web，移动端，桌面客户端），也是前端的优点之一。</li>
</ul>
<a id="more"></a>
<h2 id="前后端分离的原理及意义"><a href="#前后端分离的原理及意义" class="headerlink" title="前后端分离的原理及意义"></a>前后端分离的原理及意义</h2><p>后端提供数据接口，前端获取数据并呈现。</p>
<h3 id="前后端分离的意义"><a href="#前后端分离的意义" class="headerlink" title="前后端分离的意义"></a>前后端分离的意义</h3><ul>
<li>后端无须套模版，前后端解耦。</li>
<li>提高工作效率，前后端同步开发。</li>
</ul>
<h2 id="对-react-的理解与相对于-jQuery-开发的优势"><a href="#对-react-的理解与相对于-jQuery-开发的优势" class="headerlink" title="对 react 的理解与相对于 jQuery 开发的优势"></a>对 react 的理解与相对于 jQuery 开发的优势</h2><h3 id="对-React-的理解"><a href="#对-React-的理解" class="headerlink" title="对 React 的理解"></a>对 React 的理解</h3><ul>
<li>通过 Virtual DOM 和 Diff 算法隔离 DOM 操作。</li>
<li>采用单向数据流，数据流动方向单一，可跟踪。</li>
<li>组件化，JSX 自定义标签，便于抽象化。</li>
</ul>
<h3 id="对比-jQuery-开发的优势"><a href="#对比-jQuery-开发的优势" class="headerlink" title="对比 jQuery 开发的优势"></a>对比 jQuery 开发的优势</h3><ul>
<li>无需直接操作 DOM，事件通过改变 state 间接操作 DOM。</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdj0r2scb1j313u10u7c4.jpg" alt="React-vs-jQuery.png"></p>
<h2 id="页面性能优化"><a href="#页面性能优化" class="headerlink" title="页面性能优化"></a>页面性能优化</h2><blockquote>
<p><strong>页面生成过程</strong></p>
<ul>
<li>HTML代码转化为DOM</li>
<li>CSS代码转化成CSSOM</li>
<li>结合DOM和CSSOM，生成一棵渲染树</li>
<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>
<li>将布局绘制（paint）在屏幕上</li>
</ul>
</blockquote>
<ul>
<li>减少 HTTP 请求（合并 CSS/JS，小于 10k 的图片 base64）</li>
<li>减少 DOM 操作（可使用 DocumentFragment）</li>
<li>避免不必要的重绘与重排（重排必定导致重绘）</li>
<li>优化 CSS 选择器（从右向左匹配）</li>
<li>CSS/JS minify，减少文件体积</li>
<li>开启 Gzip 压缩</li>
<li>将 CSS 放到顶部，JavaScript 放到尾部（JavaScript 会阻塞页面）</li>
<li>压缩图片以及使用 CSS Sprite</li>
<li>使用 CDN 加速，适当进行文件缓存</li>
<li>合理控制 cookie 大小（每次请求都会包含 cookie）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XMLHttpRequest 学习笔记]]></title>
      <url>http://www.ahonn.me/2017/03/02/xmlhttprequest-study-notes/</url>
      <content type="html"><![CDATA[<blockquote>
<p>AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术），指的是一套综合了多项技术的浏览器端网页开发技术。</p>
</blockquote>
<p>Ajax 技术的核心是 <code>XMLHttpRequest</code> 对象，起初 IE 首先引入这个特性，后面其他浏览器供应商也提供了相同的实现。</p>
<h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h2><p>XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。</p>
<a id="more"></a>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul>
<li><p>open() 启动请求以备发送，参数包括请求方式，请求地址，是否异步</p>
</li>
<li><p>send() 发送请求，必要参数可发送请求主体数据，无数据时传入 null</p>
</li>
<li><p>abort() 发起异步请求时，终止请求</p>
</li>
<li><p>setRequestHeader() 设置请求头部信息</p>
</li>
<li><p>getRequestHeader() 获取请求头部信息</p>
</li>
<li><p>getAllRequestHeader() 获取全部请求头部信息，以字符串的形式返回</p>
</li>
</ul>
<h3 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h3><ul>
<li><p>status 响应的 HTTP 状态码</p>
</li>
<li><p>statusText 响应的 HTTP 状态说明</p>
</li>
<li><p>responseText 作为响应主体返回的文本</p>
</li>
<li><p>responseXML 响应数据中的 XML DOM 文档</p>
</li>
<li><p>readyState 请求/响应过程的当前活动阶段</p>
<ul>
<li><p>0 未初始化，没有使用 <code>open()</code></p>
</li>
<li><p>1 启动，调用 <code>open()</code> 但未调用 <code>send()</code></p>
</li>
<li><p>2 发送，已经调用 <code>send()</code>，但未接收到响应数据</p>
</li>
<li><p>3 接收，接收到部分响应数据</p>
</li>
<li><p>4 完成，接收到全部响应数据</p>
</li>
</ul>
</li>
</ul>
<h3 id="readystatechange-事件"><a href="#readystatechange-事件" class="headerlink" title="readystatechange 事件"></a>readystatechange 事件</h3><p>当 readyState 属性值改变时触发 readystatechange 事件。通过判断 readystate 属性的值，在完成请求响应整个过程之后执行某些操作。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim 折腾记]]></title>
      <url>http://www.ahonn.me/2017/02/19/notes-of-vim/</url>
      <content type="html"><![CDATA[<p>昨天在微信读书上面看到了池建强的《MacTalk 人生元编程》，然后花了差不多一天看完，其中有篇有关于 Vim 的文章提起了我对这个编辑器的再一次兴趣（对的，我对它感兴趣很多次了，每次都懒..）。</p>
<p>一直懒得去慢慢配置它，又不想用别人的配置。自己用的编辑器还是想自己折腾，然后今天就趁着我对这个还有点热度赶紧折腾起来。</p>
<h2 id="MacVim"><a href="#MacVim" class="headerlink" title="MacVim"></a>MacVim</h2><p>其实在命令行里面直接写代码还有有些不习惯的，所以选了 MacVim 这个 GUI 版本。这样又可以与其他编辑器一样单独打开，想小改代码的时候又可以直接打开命令行搞。</p>
<p>在 MacTalk 的文章里面有提到 Vim 中文版本的<a href="http://sourceforge.net/projects/vimcdoc/files/latest/download" target="_blank" rel="external">帮助文档</a>，遂下载之。果然还是中文的比较浅显易懂。</p>
<p>以前看别人的 <code>.vimrc</code> 配置，里面有些编辑器的基本配置，也不知道是哪里查的。原来这些配置可以在编辑器中输入 <code>:help options</code> 进行查看。</p>
<a id="more"></a>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>关于缩进的配置，主要设置了 <code>autoindent</code>, <code>smartindent</code> 和 <code>expandtab</code> 这三个选项。</p>
<ul>
<li><code>autoindent</code> 选项根据上一行决定新行的缩进</li>
<li><code>smartindent</code> 选项智能自动缩进</li>
<li><code>expandtab</code> 选项将 tab 转换为空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set autoindent</div><div class="line">set smartindent</div><div class="line">set expandtab</div></pre></td></tr></table></figure>
<h3 id="行号"><a href="#行号" class="headerlink" title="行号"></a>行号</h3><p>显示行号是硬需求，但是与其他编辑器不同，在 vim 上还有相对行号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set number</div><div class="line">set relativenumber</div></pre></td></tr></table></figure>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>显而易见，手动安装 vim 插件是很麻烦很麻烦的。与 sublime text 之类的类似，vim 同样有类似的插件管理器 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a>。</p>
<p>创建文件夹 <code>~/.vim</code> 和配置文件 <code>~/.vimrc</code>，并安装 Vundle:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</div></pre></td></tr></table></figure>
<p>为了方便管理再新建一个 <code>.vimrc.bundles</code> 来单独存放插件列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">set nocompatible    &quot; be iMproved, required</div><div class="line">filetype off        &quot; requried</div><div class="line">set rtp+=~/.vim/bundle/vundle/</div><div class="line"></div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">&quot; Let Vundle manage Vundle</div><div class="line">Bundle &apos;gmarik/vundle&apos;</div><div class="line"></div><div class="line">&quot; .... 其他插件</div><div class="line"></div><div class="line">call vundle#end()</div><div class="line">&quot; required</div><div class="line">filetype plugin indent on</div></pre></td></tr></table></figure>
<p>以后添加插件的时候只需要在这个文件里面添加一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bundle &apos;xxx&apos;</div></pre></td></tr></table></figure>
<p>安装插件输入 <code>:BundleInstall</code> 命令即可，卸载插件时删除对应的配置并运行 <code>:BundleClean</code> 删除插件。</p>
<h3 id="括号补全"><a href="#括号补全" class="headerlink" title="括号补全"></a>括号补全</h3><p>第一次用的时候，输入 <code>(</code> 居然没有自己蹦出来另外一个 <code>)</code>。这不科学，讲道理这个是一定要的。</p>
<p>发现很多人用的是 <a href="https://github.com/Raimondi/delimitMate" target="_blank" rel="external">delimitMate</a> ，添加 <code>Bundle &#39;delimitMate&#39;</code> 到 <code>.vimrc.bundles</code>，运行 <code>BundleInstall</code>。</p>
<p>安装完直接就可以自动补全括号了。</p>
<h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>很多浏览器都支持 Emmet 插件，vim 同样也有。但这个 Emmet 是第三方的，叫 <a href="https://github.com/mattn/emmet-vim/" target="_blank" rel="external">Emmet.vim</a>。</p>
<p>安装完之后主要是设置一下出发的快捷键，默认的快捷键是 <code>Ctrl + y</code>。<br>我把快捷键修改成 <code>Ctrl + e</code> 比较顺手。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot; Emmet.vim</div><div class="line">let g:user_emmet_expandabbr_key = &apos;&lt;c-e&gt;&apos;</div></pre></td></tr></table></figure>
<h3 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h3><p>目录树就基本上也就是使用 <a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NERDTree</a>。</p>
<p>开启目录树的快捷键修改为 <code>Ctrl + b</code>，然后当 vim 只剩目录树显示的时候自动退出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot; NERDTree </div><div class="line">map &lt;c-b&gt; :NERDTreeToggle&lt;CR&gt;</div><div class="line">autocmd vimenter * NERDTree</div><div class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp;b:NERDTreeType == &quot;primary&quot;) | q | endif</div></pre></td></tr></table></figure></p>
<h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><p>补全用的就是大名鼎鼎的 <a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> 了。</p>
<p>关于这个插件网上有很多插件，我就不啰嗦了。这里主要是抄的百度 EFE 的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&quot; YouCompleteMe</div><div class="line">&quot; http://efe.baidu.com/blog/vim-javascript-completion/#youcompleteme</div><div class="line">let g:ycm_min_num_of_chars_for_completion = 3 </div><div class="line">let g:ycm_autoclose_preview_window_after_completion=1</div><div class="line">let g:ycm_complete_in_comments = 1</div><div class="line">let g:ycm_key_list_select_completion = [&apos;&lt;c-n&gt;&apos;, &apos;&lt;Down&gt;&apos;]</div><div class="line">let g:ycm_key_list_previous_completion = [&apos;&lt;c-p&gt;&apos;, &apos;&lt;Up&gt;&apos;]</div><div class="line">&quot; Use tab</div><div class="line">function! TabFunction ()</div><div class="line">    let line = getline(&apos;.&apos;)</div><div class="line">    let substr = strpart(line, -1, col(&apos;.&apos;)+1)</div><div class="line">    let substr = matchstr(substr, &quot;[^ \t]*$&quot;)</div><div class="line">    if strlen(substr) == 0</div><div class="line">        return &quot;\&lt;tab&gt;&quot;</div><div class="line">    endif</div><div class="line">    return pumvisible() ? &quot;\&lt;c-n&gt;&quot; : &quot;\&lt;c-x&gt;\&lt;c-o&gt;&quot;</div><div class="line">endfunction</div><div class="line">inoremap &lt;tab&gt; &lt;c-r&gt;=TabFunction()&lt;cr&gt;</div><div class="line"></div><div class="line">let g:ycm_semantic_triggers = &#123;</div><div class="line">    \   &apos;css&apos;: [ &apos;re!^\s&#123;2&#125;&apos;, &apos;re!:\s+&apos;],</div><div class="line">    \   &apos;html&apos;: [ &apos;&lt;/&apos; ],</div><div class="line">    \ &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>折腾了一下午，终于算是搞定了。其实过程还是蛮好玩的，有机会还想写写插件玩玩。抛弃 VS Code，开始 Vim 之旅感。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 继承的那些事]]></title>
      <url>http://www.ahonn.me/2017/01/24/something-about-javaScript-inherit/</url>
      <content type="html"><![CDATA[<p>众所周知，JavaScript 的继承是实现继承，而没有 Java 中的接口继承。这是因为 JavaScript 中函数没有签名，而实现继承依靠的是原型链来实现的。</p>
<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>JavaScript 中通过修改对象原型指向的对象来实现继承，即是将一个对象的原型指向要继承的对象实例，从而实现继承对象的属性及方法。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'super'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getType() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'sub'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> SubType();</div><div class="line"><span class="built_in">console</span>.log(sub.getType()); <span class="comment">// "sub"</span></div></pre></td></tr></table></figure>
<h3 id="原型链继承的不足"><a href="#原型链继承的不足" class="headerlink" title="原型链继承的不足"></a>原型链继承的不足</h3><p>实际上，上面的代码还缺少一句代码，我们将 SubType 的原型指向了 SuperType 的实例，即<code>SubType.prototype.constructor</code> 会返回 <code>SuperType</code> 而不是 <code>SubType</code>，使用 <code>instanceof</code> 操作符返回的将是 <code>SuperType</code>。所以需要将 <code>SubType.prototype.constructor</code> 重新指向 <code>SubType</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.constructor = SubType;</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>但即使是这样，原型链继承依然有两点问题：原型中的实例引用类型属性会在所有对象实例中共享，无法想 Java 的继承一样向父类的构造函数中传递参数。</p>
<h2 id="其他继承方式"><a href="#其他继承方式" class="headerlink" title="其他继承方式"></a>其他继承方式</h2><p>由于原型链继承存在一些不足，为了解决这些不足，JavaScript 中还有其他的几种继承的方式。</p>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>因为原型链无法传递参数到父类的构造函数中，因此出现了这种叫做借用构造函数的技术。顾名思义，即是借用父类的构造函数在子类中进行调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>); <span class="comment">// &lt;- 执行父类构造函数</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>借用构造函数虽然解决了构造函数传参的问题，但是当父类拥有方法时每个子类的实例都会拥有独立的方法，这个问题与单独使用构造函数模式定义类型的时候相同。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>类比使用构造函数模式定义类型时的解决方法（组合构造函数模式与原型模式），继承时的解决方法也类似。即组合原型链继承和借用构造函数，属性由借用构造函数的方式继承，方法由原型链继承。</p>
<p>实际上也就是在原型链继承的代码中添加在子类的构造函数中调用父类构造函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'super'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getType() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'sub'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.constructor = SubType;</div></pre></td></tr></table></figure>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>组合继承是常用的继承方式，但是同样的也是有不足之处：调用了两次父类的构造函数，一次在子类构造函数中调用父类构造函数，一次在实例父类对象赋值给子类的原型。</p>
<p>寄生组合式继承在指定子类的原型的时候不必调用父类的构造函数，而是直接使用 <code>Object.create()</code> 创建父类原型的副本。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="built_in">Object</span>.create(SuperType.prototype); <span class="comment">// 直接使用父类原型创建副本</span></div><div class="line">SubType.prototype.constructor = SubType;</div></pre></td></tr></table></figure>
<h2 id="ES6-中的继承"><a href="#ES6-中的继承" class="headerlink" title="ES6 中的继承"></a>ES6 中的继承</h2><p>ES6 引入了 <code>class</code> 关键子，可以像其他语言中一样使用 <code>extends</code> 关键字来继承。虽然能够使用 <code>extends</code> 实现继承，但实际上内部还是基于原型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span> <span class="keyword">extends</span> <span class="title">SuperType</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始制作 Hexo 主题]]></title>
      <url>http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo theme</a> 中的 <a href="https://github.com/lotabout/hexo-theme-noise" target="_blank" rel="external">Noise</a> 主题。 </p>
<p>开始之前你需要了解：</p>
<ul>
<li>模板引擎</li>
<li>CSS预处理器</li>
<li>Hexo 文档</li>
</ul>
<p>本文使用的模板引擎为 <a href="http://www.embeddedjs.com/" target="_blank" rel="external">ejs</a>，使用的 CSS 预处理器为 <a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a>。这也是 hexo 项目预装了的 render 插件，如果想使用其他模板引擎或者其他 CSS 预处理器，可以安装相对应的 render 插件。例如我的 <a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">Even</a> 主题使用的是 Swig 与 SCSS。</p>
<p>本文的代码： <a href="https://github.com/ahonn/theme-example" target="_blank" rel="external">theme-example</a> 。</p>
<a id="more"></a>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>主题目录结构以自带的 <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">landscape</a> 主题为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── languages  语言文件，用于国际化</div><div class="line">├── layout     页面模板文件</div><div class="line">├── scripts    Hexo 脚本</div><div class="line">└── source     主题资源文件，包括页面样式，脚本，字体等</div></pre></td></tr></table></figure>
<p>我们在 <code>themes</code> 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-demo</code> 中按照 landscape 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 <code>source</code> 文件夹。</p>
<h2 id="创建布局模板"><a href="#创建布局模板" class="headerlink" title="创建布局模板"></a>创建布局模板</h2><p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。</p>
<p><code>layout/index.ejs</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Word<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">theme-example</span></div></pre></td></tr></table></figure>
<p>运行 <code>hexo server --debug</code> 以 debug 模式开启 Hexo 本地服务器预览，访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>。</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg" alt="Hello World"></p>
<h2 id="添加页面导航"><a href="#添加页面导航" class="headerlink" title="添加页面导航"></a>添加页面导航</h2><p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 head 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。</p>
<p><code>layout/layout.ejs</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">head</span>') %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>') %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <a href="https://hexo.io/docs/templates.html#Partials" target="_blank" rel="external">Templates | Hexo</a>。</p>
<p><code>layout/_partial/head.ejs</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，Hexo 还提供了许多变量可在模板中使用，详见 <a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">Variables | Hexo</a>。</p>
<p><code>layout/_partial/header.ejs</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for() %&gt;"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"menu-item-link"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives"</span> <span class="attr">class</span>=<span class="string">"menu-item-link"</span>&gt;</span>Archive<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&lt;h2&gt;Hello World&lt;/h2&gt;</code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&lt;%- body %&gt;</code> 的位置。我们将得到一个有导航菜单的 Hello World 页面。</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg" alt=""></p>
<h2 id="添加主题配置文件"><a href="#添加主题配置文件" class="headerlink" title="添加主题配置文件"></a>添加主题配置文件</h2><p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过 <code>theme</code> 这个变量来拿到该配置文件中的配置。</p>
<p><code>theme-demo/_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  Home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  Archives:</span> <span class="string">/archives</span></div></pre></td></tr></table></figure>
<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for() %&gt;"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">name</span> <span class="attr">in</span> <span class="attr">theme.menu</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[name]) %&gt;"</span> <span class="attr">class</span>=<span class="string">"menu-item-link"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 Github 的链接：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  Home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  Archives:</span> <span class="string">/archives</span></div><div class="line"><span class="attr">  Github:</span> <span class="attr">https://github.com/ahonn</span></div></pre></td></tr></table></figure>
<p>除此之外还可以添加其他需要的配置，例如 RSS，评论等等。</p>
<h2 id="添加首页文章列表"><a href="#添加首页文章列表" class="headerlink" title="添加首页文章列表"></a>添加首页文章列表</h2><p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 Hexo 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href="https://hexo.io/docs/variables.html#Page-Variables" target="_blank" rel="external">这里</a>。</p>
<p>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"posts"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span> (<span class="attr">post</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title-link"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content</span> %&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-meta"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">date</span>(<span class="attr">post.date</span>, "<span class="attr">YYYY-MM-DD</span>") %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 Hexo 提供的时间处理的<a href="https://hexo.io/docs/helpers.html#date" target="_blank" rel="external">辅助函数</a>。本文中使用到的函数如无特别说明，即为 Hexo 的辅助函数。</p>
<h3 id="文章摘录"><a href="#文章摘录" class="headerlink" title="文章摘录"></a>文章摘录</h3><p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。</p>
<p>Hexo 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&lt;!--more--&gt;</code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.excerpt</span> %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="添加页面样式"><a href="#添加页面样式" class="headerlink" title="添加页面样式"></a>添加页面样式</h2><p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。</p>
<p>由于 Hexo 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。Hexo 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 styl 为 css 文件。</p>
<p>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.styl</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。 </p>
<p><code>_partial/header.styl</code>:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">2em</span></div><div class="line">  <span class="attribute">display</span>: flex</div><div class="line">  <span class="attribute">align-items</span>: baseline</div><div class="line">  <span class="attribute">justify-content</span>: space-between</div><div class="line"></div><div class="line">  <span class="selector-class">.blog-title</span> <span class="selector-class">.logo</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#AAA</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Comic Sans MS"</span>,cursive,LiSu,sans-serif;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.menu</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="selector-class">.menu-item</span> &#123;</div><div class="line">      <span class="attribute">display</span>: inline-block;</div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.menu-item-link</span> &#123;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#AAA</span>;</div><div class="line">      <span class="attribute">text-decoration</span>: none;</div><div class="line"></div><div class="line">      &amp;:hover &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#368CCB</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_partial/post.style</code>:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.post</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.posts</span>  &#123;</div><div class="line">  <span class="selector-class">.post</span>:first-child &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.post-title</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</div><div class="line"></div><div class="line">    <span class="selector-class">.post-title-link</span> &#123;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#368CCB</span>;</div><div class="line">      <span class="attribute">text-decoration</span>: none;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.post-content</span> &#123;</div><div class="line">    <span class="selector-tag">a</span> &#123;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#368CCB</span>;</div><div class="line">      <span class="attribute">text-decoration</span>: none;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.post-meta</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#BABABA</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>style.styl</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background-color: #F2F2F2;</div><div class="line">  font-size: 1.25rem;</div><div class="line">  line-height: 1.5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.container &#123;</div><div class="line">  max-width: 960px;</div><div class="line">  margin: 0 auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@import "_partial/header";</div><div class="line">@import "_partial/post";</div></pre></td></tr></table></figure>
<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <a href="https://hexo.io/docs/helpers.html#css" target="_blank" rel="external"><code>css()</code></a>:</p>
<p><code>layout/_partial/head.ejs</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">style.css</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>至此，我们会看到站点的首页是这个样子的：</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg" alt=""></p>
<p><strong>注意，这里会报错。原因是生成文章页时没有找到对应的模版，所以使用了首页的模版，但文章页并没有 <code>page.posts</code> 这个属性（undefined 没有 each 方法）。新建 post.ejs 即可解决，或直接跳过直到完成文章页模版。</strong></p>
<h2 id="添加分页"><a href="#添加分页" class="headerlink" title="添加分页"></a>添加分页</h2><p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 10+ 次，再查看站点首页。会发现，首页只显示了 10 篇文章。</p>
<p>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。</p>
<p>新建 <code>_partial/paginator.ejs</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.total</span> &gt;</span> 1)&#123; %&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"page-nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">paginator</span>(&#123;</span></div><div class="line">      <span class="attr">prev_text:</span> "&amp;<span class="attr">laquo</span>; <span class="attr">Prev</span>",</div><div class="line">      <span class="attr">next_text:</span> "<span class="attr">Next</span> &amp;<span class="attr">raquo</span>;"</div><div class="line">    &#125;) %&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">paginator</span>') %&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们使用到了另外的一个辅助函数 <a href="https://hexo.io/docs/helpers.html#paginator" target="_blank" rel="external"><code>paginator</code></a>，它能够帮助我们插入分页链接。</p>
<h2 id="添加文章详情页"><a href="#添加文章详情页" class="headerlink" title="添加文章详情页"></a>添加文章详情页</h2><p>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-meta"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">date</span>(<span class="attr">page.date</span>, "<span class="attr">YYYY-MM-DD</span>") %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.content</span> %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>
<h2 id="添加归档页"><a href="#添加归档页" class="headerlink" title="添加归档页"></a>添加归档页</h2><p>创建归档页使用的模板文件 <code>archive.ejs</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"archive"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-archive"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.each</span>(<span class="attr">function</span> (<span class="attr">post</span>) &#123; %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-date"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">date</span>(<span class="attr">post.date</span>, "<span class="attr">YYYY-MM-DD</span>") %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">paginator</span>') %&gt;</span></div></pre></td></tr></table></figure>
<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：</p>
<p><code>css/_partial/archive.styl</code>:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.archive</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">50px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#ddd</span>;</div><div class="line"></div><div class="line">  <span class="selector-class">.post-archive</span> &#123;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="selector-class">.post-item</span> &#123;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="selector-class">.post-date</span> &#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#BABABA</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="selector-class">.post-title</span> &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#368CCB</span>;</div><div class="line">        <span class="attribute">text-decoration</span>: none;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 i18n 的。站点的语言设置为站点配置文件中的 <code>language</code>。</p>
<p>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Menu:</span></div><div class="line"><span class="attr">  Home:</span> <span class="string">Home</span></div><div class="line"><span class="attr">  Archives:</span> <span class="string">Archives</span></div><div class="line"><span class="attr">  Github:</span> <span class="string">Github</span></div><div class="line"></div><div class="line"><span class="attr">Paginator:</span></div><div class="line"><span class="attr">  Prev:</span> <span class="string">Prev</span></div><div class="line"><span class="attr">  Next:</span> <span class="string">Next</span></div></pre></td></tr></table></figure>
<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：</p>
<p><code>_partial/header.ejs</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for() %&gt;"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">name</span> <span class="attr">in</span> <span class="attr">theme.menu</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[name]) %&gt;"</span> <span class="attr">class</span>=<span class="string">"menu-item-link"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">__</span>('<span class="attr">Menu.</span>' + <span class="attr">name</span>) %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>_partial/paginator.ejs</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.total</span> &gt;</span> 1)&#123; %&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"page-nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">paginator</span>(&#123;</span></div><div class="line">      <span class="attr">prev_text:</span> "&amp;<span class="attr">laquo</span>;" + <span class="attr">__</span>('<span class="attr">Paginator.Prev</span>'),</div><div class="line">      <span class="attr">next_text:</span> <span class="attr">__</span>('<span class="attr">Paginator.Next</span>') + "&amp;<span class="attr">raquo</span>;"</div><div class="line">    &#125;) %&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：</p>
<p><code>languages/zh-CN.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Menu:</span></div><div class="line"><span class="attr">  Home:</span> <span class="string">首页</span></div><div class="line"><span class="attr">  Archives:</span> <span class="string">归档</span></div><div class="line"><span class="attr">  Github:</span> <span class="string">交友</span></div><div class="line"></div><div class="line"><span class="attr">Paginator:</span></div><div class="line"><span class="attr">  Prev:</span> <span class="string">上一页</span></div><div class="line"><span class="attr">  Next:</span> <span class="string">下一页</span></div></pre></td></tr></table></figure></p>
<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>
<h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 Hexo 主题有了一定的了解。其实说白了，Hexo 就是把那些 Markdown 文件按照不同的布局模板，填上对应的数据生成 HTML 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 stylus/less/sass 等文件编译。</p>
<p>本文并没有提及有关页面 JavaScript 的部分，实际上与写 CSS 样式相同。在 <code>source/js</code> 中写 JavaScript 脚本，然后在模板中引入即可。</p>
<p>感谢阅读，希望对你有所帮助。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016 年终总结]]></title>
      <url>http://www.ahonn.me/2016/12/13/2016-summary/</url>
      <content type="html"><![CDATA[<p>一转眼 2016 年就快要结束了，这一年对自己来说收获了很多。</p>
<p>去年的总结，给自己定下了个 2016 年的计划。现在 2016 也差不多快结束了，我对自己执行的情况还是比较满意的。</p>
<h2 id="关于-Github"><a href="#关于-Github" class="headerlink" title="关于 Github"></a>关于 Github</h2><p>去年年底参加了 Github 上的一个编程马拉松，一开始 commit 都是没有断过的，但是之后慢慢的总会有抓脑袋想 commit 的状况出现。不能说这样不好，只不过会让自己为了 commit 而 commit，本末倒置了。所以后面就不再管是否连续 commit 了，也把之前几个自己觉得不行的项目给删除了。贴一张今年 Github 上的 commit 图，虽然还是有很多质量不高的提交，但也算是今年对自己的付出的一点交代了。</p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gw1faoxzmckraj30kl05i0ui.jpg" alt=""></p>
<a id="more"></a>
<p>大多数的提交都贡献自 <a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">hexo-theme-even</a> 这个项目。放假在家的时候突然想自己写个博客的主题，结果说干就干，就写起来了。到目前为止已经重构了两遍了，每一次都能够发现之前写的不好的地方。不过在这个过程中明白了一点，不能为了写代码而写代码，应该更加关注用户体验。之前写的时候完全是自己能用就好的，后来使用的人越来越多了，就需要关注一些之前自己不会关注到的点。</p>
<p>更深刻的体会到，设计与规划应该占到的比重应该远远大于编码的比重。这就好比盖房子，一股脑的搬砖盖最后可能盖出来的是歪楼。</p>
<h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>暑假的时候没有回家，找了一个技术相关的暑假实习。当然，所谓暑假实习就是打打下手咯。不过期间也参与了个很有意思的项目，不过因为是比较偏重后端的公司（使用的大多是 Ruby），所以前端部分都是自己折腾，没有学到什么东西。</p>
<p>在实习期间也学到了非常多的东西，比如说怎么使用 git 进行团队协作，写页面的时候要注重用户体验，一个按钮或者一个文本的位置都需要慎重思考。由于公司比较小，感受不到比较浓厚的技术气氛。所以希望大三结束的这份实习能够找到自己所期望的那样技术气氛浓厚的公司来实习。</p>
<h2 id="关于读书"><a href="#关于读书" class="headerlink" title="关于读书"></a>关于读书</h2><p>暑假实习的时候由于是一个人住，每天上下班都要在地铁上花费一个多钟的时间。所以在一开始的时候就用了京东白条预先买了个 Kindle，然后在实习的这段时间里看完了《乔布斯传》，《解忧杂货店》，《人性的弱点》以及《安静》。关于读书，想起了一个知乎上的一个回答：<a href="https://www.zhihu.com/question/22456239/answer/45671305" target="_blank" rel="external">读了很多书，但是都忘掉了，读书的意义在哪里？ - 尧大力的回答 - 知乎</a>，深以为然。读书对我的影响还是很大的，会改变对事物的看法。不是有句话说，读万卷书，行万里路。所以要多读书，以后有机会的话也要多出去走走。</p>
<p>除了看这些书之外，也看了一些技术性的书籍。实习之前看了本《深入理解 bootstrap》，这个在我实习的时候用 bootstrap 的时候有很大帮助。还有一些 JavaScript 相关的书，高程三打算在大三实习之前再刷多一次。</p>
<p>有点小遗憾的是，我依旧没有看完 SICP（Structure and Interpretation of Computer Programs<br>），看了前两章就没有看了。所以明年的计划里面会加上看完这本书。此外，双十一的时候也买了好几本技术类书籍，其实都是为了到时候面试而准备的，正好也是需要补补基础。其实更关键的一点是太穷只能买书了…</p>
<h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>今年回家的时间比较少，前半年在学校，后半年在学校，中间实习在广州一个人住。第一次离家还是一个人生活，让我这样一个不会照顾自己的人也慢慢的学会了照顾自己。同时也明白了很多事情，一个人的时候要好好的，不能让父母担心。</p>
<h2 id="关于来年"><a href="#关于来年" class="headerlink" title="关于来年"></a>关于来年</h2><p>2018 年就正式毕业了，也就是说在学校的时间不多了，希望自己能好好过完这最后的学生时光。</p>
<p>无例外，今年的总结也要对新的一年列个计划。</p>
<ul>
<li>继续好好维护博客主题</li>
<li>完成 leetcode 上的前 150 道题目</li>
<li>读完买的那些书，包括不限于高程三，SICP</li>
<li>写自己的简历网站</li>
<li>多运动，久坐对身体不好</li>
<li>有机会多出去走走</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 创建对象的一些姿势]]></title>
      <url>http://www.ahonn.me/2016/11/30/some-ways-of-javascript-create-object/</url>
      <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>在函数中创建 Object 对象，并为对象添加属性。函数返回添加属性之后的对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">  o.name = name</div><div class="line">  o.age = age</div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> o</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> p = createPerson(<span class="string">"ahonn"</span>, <span class="number">21</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>但工厂模式产生的对象依旧为 Object 类型，只是在对象上添加了一些属性。</p>
<blockquote>
<p>工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p>
</blockquote>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>由于工厂模式创建的对象没有解决对象识别的问题，出现了另外一种新模式：构造函数模式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"ahonn"</span>, <span class="number">21</span>)</div></pre></td></tr></table></figure>
<p>这里使用了 <code>new</code> 操作符，即是将 Person 函数通过构造函数的方式去调用来创建对象。</p>
<p>构造函数会进行下面几个步骤：</p>
<ul>
<li>创建一个新对象</li>
<li>将构造函数的 this 指向新对象</li>
<li>通过 this 给对象添加属性</li>
<li>返回新对象</li>
</ul>
<p>使用构造函数模式创建的对象可以通过 <code>constructor</code> 属性查看对象的类型。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(p.constructor) <span class="comment">// Person</span></div></pre></td></tr></table></figure>
<h3 id="构造函数也是普通函数"><a href="#构造函数也是普通函数" class="headerlink" title="构造函数也是普通函数"></a>构造函数也是普通函数</h3><p>构造函数与普通的函数无异，也可以直接调用构造函数。但此时就不会创建新对象，函数中的 this 指向的是函数当前所在的作用域。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person(<span class="string">"ahonn"</span>, <span class="number">21</span>)</div><div class="line"><span class="keyword">this</span>.sayName() <span class="comment">// ahonn</span></div></pre></td></tr></table></figure>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>通过构造函数模式创建的对象有一个问题，就是创建的对象各自拥有自己的方法，而实际上这些方法都是相同的。通过原型模式即可以将共同的属性方法放在 prototype 上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"ahonn"</span></div><div class="line">Person.prototype.age = <span class="number">21</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</div><div class="line">p1.sayName() <span class="comment">// "ahonn"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person()</div><div class="line">p2.sayName() <span class="comment">// "ahonn"</span></div></pre></td></tr></table></figure>
<p>对象在 prototype 上的属性是共享的，即修改一个对象的某个属性，另一个对象对于的属性值也会改变。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p1.name = <span class="string">"test"</span></div><div class="line">p1.sayName() <span class="comment">// test</span></div><div class="line"></div><div class="line">p2.sayName() <span class="comment">// test</span></div></pre></td></tr></table></figure>
<h2 id="构造函数与原型模式"><a href="#构造函数与原型模式" class="headerlink" title="构造函数与原型模式"></a>构造函数与原型模式</h2><p>使用原型模式创建的对象共享 prototype 上的属性，那么当有些属性不想要对象之间共享的时候，就可以结合构造函数模式与原型模式来使用。这也是最常用的创建对象的方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span>  p1 = <span class="keyword">new</span> Person(<span class="string">"ahonn"</span>, <span class="number">21</span>)</div><div class="line">p1.sayName() <span class="comment">// "ahonn"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"test"</span>, <span class="number">12</span>)</div><div class="line">p2.sayName() <span class="comment">// "test"</span></div></pre></td></tr></table></figure>
<h2 id="ES6-类"><a href="#ES6-类" class="headerlink" title="ES6 类"></a>ES6 类</h2><p>在 ES6 中有类似于 Java 创建对象的方式，即通过类来创建对象。ES6 中提供了 <code>class</code> 关键字，来声明一个类型，并如上面构造函数模式的方式一样使用 <code>new</code> 来声明对象。虽然可以使用类似 Java 中的 <code>class</code> 来声明，但实际上只是给构造函数与原型模式加上了语法糖，使得代码看起来更加易读。</p>
<p>还是 Person 类的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name, age) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">    <span class="keyword">this</span>.age = age</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayName() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"ahonn"</span>, <span class="number">21</span>)</div><div class="line">p.sayName() <span class="comment">// "ahonn"</span></div></pre></td></tr></table></figure></p>
<p>通过 <code>class</code> 关键字声明 Person 类，<code>constructor</code> 函数即为 Person 类的构造函数，类属性的初始化也在其中。需要在各个对象中共享的方法也写在 <code>class</code> 中，避免了原来定义在 <code>prototype</code> 上时的撕裂感。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 数据类型判断]]></title>
      <url>http://www.ahonn.me/2016/11/21/javascript-data-type-judgment/</url>
      <content type="html"><![CDATA[<p>最近开始读之前没有读完的 underscore 的源码，刚把 Object 部分读完。对 JavaScript 中类型判断部分的总结。</p>
<h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><p>在进行类型判断时，使用到最多的当属 <code>Object.prototype.toString()</code>。</p>
<p><code>toString()</code> 方法返回一个代表该对象的字符串。每个对象都会继承 Object 上的 <code>toString</code> 方法，如果该方法没有被同名方法覆盖的话。使用 <code>toString()</code> 方法将会返回字符串 <code>&quot;[object type]&quot;</code>。其中 type 根据对象的类型的不同而不同。</p>
<p>关于 <code>Object.prototype.toString()</code> 的详细描述可以查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="external">Object.prototype.toString() - JavaScript | MDN</a></p>
<a id="more"></a>
<h2 id="使用-toString-判断类型"><a href="#使用-toString-判断类型" class="headerlink" title="使用 toString() 判断类型"></a>使用 toString() 判断类型</h2><p>由于 <code>toString()</code> 会返回带有类型信息的字符串，所以通常可以使用它来进行数据类型的判断。</p>
<p>underscore 中对一些数据类型的判断实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_.each([<span class="string">'Arguments'</span>, <span class="string">'Function'</span>, <span class="string">'String'</span>, <span class="string">'Number'</span>, <span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Error'</span>, <span class="string">'Symbol'</span>, <span class="string">'Map'</span>, <span class="string">'WeakMap'</span>, <span class="string">'Set'</span>, <span class="string">'WeakSet'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  _[<span class="string">'is'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> toString.call(obj) === <span class="string">'[object '</span> + name + <span class="string">']'</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过 <code>toString()</code> 函数的返回值判断类型，这里不使用 <code>typeof</code> 判断的原因是字面量与对象的返回值不同。</p>
<p>例如字符串字面量 <code>&quot;1&quot;</code> 通过 <code>typeof</code> 操作符返回的是 <code>&quot;string&quot;</code>，而字符串对象 <code>new String(&#39;1&#39;)</code> 通过 <code>typeof</code> 操作符返回的却是 <code>&quot;object&quot;</code>。所以通过 <code>Object.prototype.toString()</code> 来进行判断最为妥当。</p>
<h2 id="判断-NaN，null，undefined"><a href="#判断-NaN，null，undefined" class="headerlink" title="判断 NaN，null，undefined"></a>判断 NaN，null，undefined</h2><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>在 JavaScript 的 Number 类型中有这样一个特殊的存在，那就是 <code>NaN</code>。<code>NaN</code> 的意思是 Not-A-Number，即不是一个数字。当对无法转换为数字的变量进行数字转换时就会得到 <code>NaN</code>。<code>Nan</code> 还有一个特殊的性质，就是 <code>NaN === NaN</code> 返回的是 false。</p>
<p>所以对 NaN 的判断的实现如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> _.isNumber(obj) &amp;&amp; <span class="built_in">isNaN</span>(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>先判断是否为 Number 类型，排除隐式类型转换造成的误判。再使用 isNaN 函数判断是否为 NaN。</p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>在 JavaScript 中有 <code>==</code> 与 <code>===</code> 两个相等操作符，后者为严格比较。<code>null == undefined</code> 的返回值是 true，所以不能使用这个来判断是否为 null。而 <code>null === undefined</code> 返回的是 false，因此使用严格相等哎判断是否为 null。而</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isNull = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj === <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>判断变量是否为 <code>undefined</code>，很自然会想到使用 <code>foo === undefined</code> 的方式来判断。但是这样做是不安全的，在旧的浏览器版本上 <code>undefined</code> 是可以被重写的。这时使用上面那样判断会出现这种状况：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> foo = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo === <span class="literal">undefined</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>所以这种判断方式不被推荐，即使新版本的浏览器上无法重写 undefined。更推荐的方式是使用 <code>void 0</code> 来判断。<br>关于 <code>void 0</code> 与 <code>undefined</code> 可以参考我在知乎上的回答：<a href="https://www.zhihu.com/question/52645620/answer/131470539" target="_blank" rel="external">（void 0）在javascript中表示什么，和undefined有什么区别？</a></p>
<p>推荐的 undefined 判断实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.isUndefined = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> obj === <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="判断-Object"><a href="#判断-Object" class="headerlink" title="判断 Object"></a>判断 Object</h2><p>在 underscore 中对对象类型的判断是通过 <code>typeof</code> 来实现的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_.isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> obj;</div><div class="line">  <span class="keyword">return</span> type === <span class="string">'function'</span> || type === <span class="string">'object'</span> &amp;&amp; !!obj;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>typeof</code> 操作符在变量为 <code>null</code> 或者是对象时返回 <code>&quot;object&quot;</code>，在变量为函数对象时返回 <code>function</code>。</p>
<p>我们需要的是判断变量是否为对象，那么就需要排除 <code>null</code> 的情况，即将变量进行两次取反操作，将变量转换为 <code>Boolean</code> 类型。由于 <code>null</code> 会转换为 <code>false</code>，那么这样就可以排除 <code>null</code> 的干扰。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「微信小程序」入坑总结]]></title>
      <url>http://www.ahonn.me/2016/11/14/wechat-app-summary/</url>
      <content type="html"><![CDATA[<p>前段时间去了广州参加了关于「微信小程序」的技术沙龙，整场下来收获颇多。实际上微信小程序刚刚发布出来的时候就关注，弄了破解了的开发工具，跑了个官方的 Demo。</p>
<p>听完回来之后就想着挖个相关的坑，正好看到手机上的 「ONE · 一个」。上网找到了 ONE 的接口，打算搞一个仿照 ONE 官方 APP 的小程序，最后就有了 <a href="https://github.com/ahonn/weapp-one" target="_blank" rel="external">weapp-one</a> 这个项目。</p>
<h2 id="关于小程序"><a href="#关于小程序" class="headerlink" title="关于小程序"></a>关于小程序</h2><p>微信小程序不是 Web 也不是 Native，尝试之后给我的感觉有点像是 weex。因为之前尝试 weex 的时候是下载一个 APP，然后通过应用内扫码来运行对应的应用。这一点上小程序类似。</p>
<p>在沙龙上有位分享嘉宾有提到，小程序实际上是在 Webview 之上再加上一层原生的组件。例如底部的 tabbar 以及顶部的 navbar 就是原生的。还有小程序的 map 组件，是调用原生的 map 组件。</p>
<a id="more"></a>
<h2 id="请求限制"><a href="#请求限制" class="headerlink" title="请求限制"></a>请求限制</h2><p>一开始就遇到了问题，ONE 官方的接口是 http 的，而且是 8000 这个端口。微信小程序对发送的请求有限制，必须是 https（在本地开发可以用 http），而且不能带端口号。</p>
<p>所以我就使用了比较暴力的方法，把开发工具中对应用来限制的代码给注释掉了，反正只是用来体验一下小程序开发，所以就无所谓了。</p>
<h2 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h2><p>在小程序中添加页面都需要将路径添加到 <code>app.json</code> 中的 <code>page</code> 项中，否则会找不到页面。与 Vue 类似，每个小程序页面包含 <code>page.js</code>，<code>page.wxml</code>，<code>page.wxss</code>，分别对应脚本，模板以及样式。</p>
<p>还可以添加一个 <code>page.json</code> 对页面进行单独配置，比如配置 <code>navigationBarTitleText</code> 来改变导航上的文字显示，诸如此类的对页面的窗口表现配置。</p>
<h2 id="奇怪的组件"><a href="#奇怪的组件" class="headerlink" title="奇怪的组件"></a>奇怪的组件</h2><p><strong>view、text</strong><br>在 wxml 里面写的是类似 HTML 的标签，标准的 HTML 标签是无法使用的。只能使用微信小程序官方的组件，组件对应有一些属性或事件可以调用。有类似于 <code>&lt;div&gt;</code> 的 <code>&lt;view&gt;</code> 组件，基本上页面上的组件都会被 <code>&lt;view&gt;</code> 包裹住。<br>然后文字方面是使用 <code>&lt;text&gt;</code>，虽然直接显示文字也没什么问题。不过我还是把所有的文字都加上了 <code>&lt;text&gt;</code> 标签。</p>
<p><strong>image</strong><br>说起组件，微信小程序里最让我不爽的就是 <code>&lt;image&gt;</code> 这个组件了。给这个组件一个图片地址之后，默认的样式不是图片的大小，而是固定的 300px * 225px。与 HTML 中的 <code>&lt;img&gt;</code> 完全不同，用起来有点不舒服。<br><code>&lt;image&gt;</code> 组件还提供了不同显示方式的 mode，不过用起来还是觉得怪怪的。</p>
<p><strong>audio</strong><br>音频播放的话有 <code>&lt;audio&gt;</code> 这个组件，但是这个组件的样式好像是固定的，类似于在网页也加上网易云音乐的外链那样。不过幸好有音频播放相关的 api 可以用，这样就可以当用户触发某些操作的时候播放音频，即可实现播放按钮点击后播放音频。</p>
<p>微信小程序在播放音频的时候，开发工具上会出现对应的音乐栏，可以对播放的音频进行播放/暂停。猜猜在真机上使用时，会在通知栏出现音频控制。上面会显示音频的作者以及歌曲名称。但是在实际使用中有一点比较尴尬，使用调用 api 的方式播放音频没有设置音频作者的选项。详情可以见 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-background-audio.html?t=20161107#wxplaybackgroundaudioobject" target="_blank" rel="external">音乐播放控制 · 小程序</a></p>
<p><strong>video</strong><br>相较与 HTML5 中的 <code>&lt;video&gt;</code> 标签，微信小程序中的 <code>&lt;video&gt;</code> 组件缺失了很多东西，例如 <code>loop</code> 与 <code>poster</code>。也就是说无法在用户点击播放按钮前显示特定的图像，只能是显示视频最开头。<br><code>&lt;video&gt;</code> 组件同样有默认的尺寸 300px * 225px，但没有 <code>&lt;image&gt;</code> 组件中的显示模式的设置。未全屏状态下，在不同的分辨率上，上下或者左右可能会存在黑边。</p>
<h2 id="特殊的-rpx"><a href="#特殊的-rpx" class="headerlink" title="特殊的 rpx"></a>特殊的 rpx</h2><p>微信小程序中有特有的一个尺寸单位 —— rpx，1rpx 表示屏幕宽度的 1/750 大小，也就是说，100% 宽度就是 750rpx。还有一个会被忽略的尺寸单位 —— rem，与 Web 中的 rem 不同，1rem 表示屏幕宽度的 1/20 大小。</p>
<p>在高度上使用 rpx 的话，也会根据屏幕的宽度的大小而改变。我更倾向与宽度使用 rpx 而高度使用 rem，不过其实比较喜欢用 px 来写样式，这可能算是一个不好的习惯。</p>
<h2 id="实现滑至最右切换页面"><a href="#实现滑至最右切换页面" class="headerlink" title="实现滑至最右切换页面"></a>实现滑至最右切换页面</h2><p>在仿照 ONE 写微信小程序的时候遇到了一个问题，使用滑块视图组件 <code>&lt;swiper&gt;</code> 去显示每日图文，一共10个图文，当滑动至最右时切换到选择往期列表的页面。如下图所示：</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79jw1f9s2qs5aimg30930g21kx.gif" alt=""></p>
<p>但是 <code>&lt;swiper&gt;</code> 组件并没有提供对应的事件，使用就自己实现了一个。主要是使用滑块视图每一次切换视图时都会触发一个 <code>bindchange</code> 事件，还有设置滑块视图显示位置的 <code>current</code> 属性。</p>
<p>在 <code>&lt;swiper&gt;</code> 组件中添加一个空的 <code>&lt;swiper-item&gt;</code> 子组件，当滑动到这个空的子组件的时候使用 <code>wx.navigateTo</code> 这个 api 去切换到往期列表这个页面。同时将滑块视图的显示位置设置到倒数第二个，即最后一个非空的子组件。</p>
<p>这样就实现了滑动至最右切换页面的功能，同时在点击返回的时候显示的也是滑块视图中的最后一个有内容的子组件。具体实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">current</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// ......</span></div><div class="line">  <span class="comment">// more code</span></div><div class="line">  handleChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> current = e.detail.current</div><div class="line">    <span class="keyword">let</span> length = <span class="keyword">this</span>.data.vols.length</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (current === length) &#123;</div><div class="line">      <span class="keyword">this</span>.setData(&#123;</div><div class="line">        <span class="attr">current</span>: length</div><div class="line">      &#125;)</div><div class="line">      wx.navigateTo(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'../history/history?page=index'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="keyword">this</span>.setData(&#123;</div><div class="line">            <span class="attr">current</span>: length - <span class="number">1</span></div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里使用了两次 <code>this.setData</code> 是因为在第二次执行上面的滑动切换页面再返回的时候，显示的子组件并不是最后一个非空的子组件，而是最后的那个空子组件。大概原因是因为第二次执行这个操作的时候，<code>current</code> 并没有更新。<br>所以解决的方案是在每次修改 <code>current</code> 之前修改一次它的值，使得后面修改 <code>current</code> 值时会触发视图的更新。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React 路由跳转后回到页面顶部]]></title>
      <url>http://www.ahonn.me/2016/10/11/after-the-react-routing-scroll-to-the-top-of-the-page/</url>
      <content type="html"><![CDATA[<p>在 React 组件间进行页面跳转后，发现页面的位置并不在页面顶部，而是在页面跳转前的位置。就是说浏览器的滚动条并没有回到顶部的位置。</p>
<p>经过搜索之后找到了解决方案：<a href="http://stackoverflow.com/questions/33188994/scroll-to-the-top-of-the-page-after-render-in-react-js" target="_blank" rel="external">Scroll to the top of the page after render in react.js</a></p>
<p>可以使用下面这种解决，但是这种方式不是一种很好的解决方法。而且 <code>scrollIntoView()</code> 方法并不回到页面的顶部，应该使用 <code>scrollTop = 0</code> 的方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate = <span class="function"><span class="params">()</span> =&gt;</span> &#123; ReactDom.findDOMNode(<span class="keyword">this</span>).scrollIntoView(); &#125;</div></pre></td></tr></table></figure>
<p>所以得到的解决方案是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate() &#123;</div><div class="line">  ReactDOM.findDOMNode(<span class="keyword">this</span>).scrollTop = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是我使用这个之后，ESlint 报了个错：<code>no-find-dom-node</code>。<br>查看 <code>eslint-plugin-react</code> 的<a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md" target="_blank" rel="external">文档</a>可以看到 Facebook 不推荐使用 <code>findDOMNode</code>，推荐使用 <code>refs</code> 获取 DOM 节点。</p>
<p>所以推荐的使用方法是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.node.scrollIntoView();</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div ref=&#123;node =&gt; this.node = node&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React 生命周期函数小结]]></title>
      <url>http://www.ahonn.me/2016/10/02/react-lifecycle-methods/</url>
      <content type="html"><![CDATA[<p>生命周期函数是指，在组件生命周期上的特定点上执行的各个函数。<br>React 的组件声明周期函数分为三种：挂载，更新以及卸载。</p>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>组件挂载的生命周期函数都在初始化渲染前后被调用。</p>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><p>只调用一次，在客户端与服务端都执行。在初始化渲染之前被调用。</p>
<a id="more"></a>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>只调用一次，在客户端执行，不在服务端执行。在初始化渲染之后被调用。<br>使用 <code>setTimeout</code> 或 <code>setInterval</code>, Ajax 请求等这些操作，均在这个方法内。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>所有组件更新的生命周期函数都不会在初始化渲染被调用。</p>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><p>当组件收到新的 <code>props</code> 时被调用。不会在初始化渲染被调用。<br>在这个函数里调用 <code>this.setState()</code>不会触发任何额外的渲染。（PS: 就是在这里被坑了 T-T）</p>
<blockquote>
<p> 如果需要实现一个对 state 变化相应的操作，使用 <a href="#componentWillUpdate">componentWillUpdate</a></p>
</blockquote>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>当新的 <code>props</code> 或者 <code>state</code> 被收到，在渲染前被调用。不会在初始化渲染时被调用。<br>如果 <code>shouldComponentUpdate</code> 返回 <code>false</code>，<code>render()</code> 会在下次 <code>state</code> 变化前被完全跳过。<a href="#componentWillUpdate">componentWillUpdate</a>  和 <a href="#componentDidUpdate">componentDidUpdate</a>  将不会被调用。</p>
<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><p>当新的 <code>props</code> 或者 <code>state</code> 被收到，在渲染前被立即调用。不会在初始化渲染被调用。<br><strong>不能在这个方法里使用 <code>this.setState()</code>。</strong></p>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>在组件的更新被更新到 DOM 后立即被调用。不会在初始化渲染被调用。</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>在组件卸载前被调用，主要用来执行一些组件的清理工作。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式备忘录]]></title>
      <url>http://www.ahonn.me/2016/09/13/the-memo-of-javascript-regexp/</url>
      <content type="html"><![CDATA[<p>JavaScript 创建正则表达式有两种方式：</p>
<ul>
<li>使用正则表达式字面量：<code>var re = /abc/;</code></li>
<li>调用 RegExp 对象的构造函数：<code>var re = new RegExp(&quot;abc&quot;);</code></li>
</ul>
<h2 id="什么时候使用构造函数？"><a href="#什么时候使用构造函数？" class="headerlink" title="什么时候使用构造函数？"></a>什么时候使用构造函数？</h2><p>当正则表达式的模式会变发生改变，或者需要从其他地方得到时（例如用户输入），适合使用构造函数的方式。</p>
<a id="more"></a>
<h2 id="匹配字符表"><a href="#匹配字符表" class="headerlink" title="匹配字符表"></a>匹配字符表</h2><ul>
<li><code>\</code>：将其后的特殊字符转义为字面量</li>
<li><code>^</code>：匹配输入的开始</li>
<li><code>$</code>：匹配输入的结束</li>
<li><code>*</code>：匹配前一个表达式0次或者多次，等价于 {0,}</li>
<li><code>+</code>：匹配前一个表达式1次或多次，等价于 {1,}</li>
<li><code>?</code>：匹配前一个表达式0次或者1次，等价于 {0,1}</li>
<li><code>.</code>：匹配除了换行符（\n）之外的任何单个字符</li>
<li><code>(x)</code>：匹配 ‘x’ 并记住匹配项</li>
<li><code>(?:x)</code>：匹配 ‘x’ 但不记住匹配项</li>
<li><code>x(?=y)</code>: 匹配 ‘x’ 并且 ‘x’ 后面跟着 ‘y’，也叫作正向肯定查找</li>
<li><code>x(?!y)</code>：匹配 ‘x’ 并且 ‘x’ 后面不跟着 ‘y’，也叫作正向否定查找</li>
<li><code>x | y</code>：匹配 ‘x’ 或者 ‘y’</li>
<li><code>{n}</code>：匹配前一个字符 n 次</li>
<li><code>{n, m}</code>：匹配前一个字符最少 n 次</li>
<li><code>[xyz]</code>：匹配括号中的任意一个字符，可以使用 <code>-</code> 指定范围</li>
<li><code>[^xyz]</code>: 匹配任何不在括号中的字符</li>
<li><code>\b</code>：匹配一个词的边界</li>
<li><code>\B</code>：匹配非单词边界</li>
<li><code>\d</code>：匹配一个数字</li>
<li><code>\D</code>：匹配一个非数字字符，等价于 [^0-9]</li>
<li><code>\f</code>：匹配一个换页符</li>
<li><code>\n</code>：匹配一个换行符</li>
<li><code>\r</code>: 匹配一个回车符</li>
<li><code>\s</code>：匹配一个空白字符</li>
<li><code>\S</code>：匹配一个非空白字符</li>
<li><code>\t</code>：匹配一个水平制表符</li>
<li><code>\v</code>: 匹配一个垂直制表符</li>
<li><code>\w</code>：匹配一个单字字符，等价于 [A-Za-z0-9_]</li>
<li><code>\W</code>：匹配一个非单字字符，等价于 [^A-Za-z0-9_]</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 最佳实践：提升代码质量的建议和技巧]]></title>
      <url>http://www.ahonn.me/2016/08/31/javascript-best-practices/</url>
      <content type="html"><![CDATA[<blockquote>
<p>翻译自：<a href="https://www.codementor.io/javascript/tutorial/javascript-best-practices" target="_blank" rel="external">JavaScript Best Practices: Tips &amp; Tricks to Level Up Your Code</a><br>没有严格的按照原文翻译，删减修改了部分内容。</p>
</blockquote>
<p>在这个教程中，会列出一些重要的 JavaScript 的最佳实践，学习这些并不会很困难。</p>
<h2 id="避免污染全局作用域"><a href="#避免污染全局作用域" class="headerlink" title="避免污染全局作用域"></a>避免污染全局作用域</h2><p>声明变量是很有趣的，有时候你会在你不知情的情况下声明了全局变量。在现在的浏览器中，全局变量将会存储在 <code>window</code> 变量中。在全局作用域中的变量可能在不经意间被覆盖。</p>
<a id="more"></a>
<p>假设你现在有一个 HTML 文件，其中包括一个 <code>&lt;script&gt;</code> 标签，包含如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">42</span>;</div><div class="line"><span class="built_in">console</span>.log(foo);</div></pre></td></tr></table></figure>
<p>显然这会在控制台中输出 42。但是，由于这些代码不是在函数中执行的，而是处于全局作用域中，因此 foo 将会被附加到 <code>window</code> 上。也就是说 <code>window.foo</code> 的值同样也是 42。</p>
<p>这样做是危险的，因为这样会覆盖现有的全局变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line">print();</div></pre></td></tr></table></figure>
<p>当执行 <code>window.print</code> 或者 <code>print</code> 时，因为我们重写了 <code>print</code> 函数，所以原来的打印函数不起作用了，也就不会弹出打印框了。</p>
<p>解决办法很简单：使用立即执行函数（IIFE）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Declare an anonymous function</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> foo = <span class="number">42</span>;</div><div class="line">   <span class="built_in">console</span>.log(<span class="built_in">window</span>.foo);</div><div class="line">   <span class="comment">// → undefined</span></div><div class="line">   <span class="built_in">console</span>.log(foo);</div><div class="line">   <span class="comment">// → 42</span></div><div class="line">&#125;)();</div><div class="line"><span class="comment">//^ and call it immediately</span></div></pre></td></tr></table></figure>
<p>或者，可以将 <code>window</code> 等全局变量作为参数传递给函数（这可能提高性能）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, doc</span>) </span>&#123;</div><div class="line">  global.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     doc.body.innerHTML = <span class="string">"Hello!"</span>;</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<p>所以，我们可以使用上述的两种方式，避免不知情的情况下创建全局变量。</p>
<h2 id="使用-“use-strict”"><a href="#使用-“use-strict”" class="headerlink" title="使用 “use strict”"></a>使用 “use strict”</h2><p>严格使用 <code>&quot;use strict&quot;</code>，这只不过是在你的代码中添加字符串，但它的作用非常大。</p>
<p>比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is bad, since you do create a global without having anyone to tell you</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   a = <span class="number">42</span>;</div><div class="line">   <span class="built_in">console</span>.log(a);</div><div class="line">   <span class="comment">// → 42</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="comment">// → 42</span></div></pre></td></tr></table></figure>
<p>上述代码，如果使用 <code>&quot;use strict&quot;</code>，你将会得到一些错误信息：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">   "use strict"</span>;</div><div class="line">   a = <span class="number">42</span>;</div><div class="line">   <span class="comment">// Error: Uncaught ReferenceError: a is not defined</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>你可能会很奇怪，为什么不把 <code>&quot;use strict&quot;</code> 放到函数之外？实际上你可以将它放到函数外，但是这样的话他就在全局环境中应用了。这有可能影响来自其他库的代码。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用 ==="></a>使用 ===</h2><p>如果你比较 a 和 b 时使用 <code>==</code>，在 JavaScript 中你会发现这是一种奇怪的方式。如果你有一个字符串和一个数字，像是下面这样。他们将是相等的，即返回 true：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"42"</span> == <span class="number">42</span></div><div class="line"><span class="comment">// → true</span></div></pre></td></tr></table></figure>
<p>这是一种不严格的比较，在进行数据验证时，最好使用 <code>===</code>。这将会严格的比较 a 与 b 是否相等：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"42"</span> === <span class="number">42</span></div><div class="line"><span class="comment">// → false</span></div></pre></td></tr></table></figure>
<h2 id="使用神奇的-amp-amp-和"><a href="#使用神奇的-amp-amp-和" class="headerlink" title="使用神奇的 &amp;&amp; 和 ||"></a>使用神奇的 &amp;&amp; 和 ||</h2><p>根据的你的需要，可以使用逻辑运算符使得代码更加简短。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span> || <span class="string">"foo"</span></div><div class="line"><span class="comment">// → "foo"</span></div><div class="line"></div><div class="line"><span class="literal">undefined</span> || <span class="number">42</span></div><div class="line"><span class="comment">// → 42</span></div><div class="line"></div><div class="line"><span class="comment">// Note that if you want to handle 0 there, you need</span></div><div class="line"><span class="comment">// to check if a number was provided:</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">a || <span class="number">42</span></div><div class="line"><span class="comment">// → 42</span></div><div class="line"></div><div class="line"><span class="comment">// This is a ternary operator—works like an inline if-else statement</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">typeof</span> a === <span class="string">"number"</span> ? a : <span class="number">42</span>;</div><div class="line"><span class="comment">// → 0</span></div></pre></td></tr></table></figure>
<p>可以这样简单的实现 if 的检查：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">expr &amp;&amp; doSomething();</div><div class="line"></div><div class="line"><span class="comment">// Instead of:</span></div><div class="line"><span class="keyword">if</span> (expr) &#123;</div><div class="line">   doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你需要返回结果，你还可以这样做：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> expr = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> res = expr &amp;&amp; doSomething();</div><div class="line">res &amp;&amp; <span class="built_in">console</span>.log(res);</div><div class="line"><span class="comment">// → &#123; foo: "bar" &#125;</span></div></pre></td></tr></table></figure>
<p>这里你可以不同意我的观点，但这是比较理想的情况。如果你不想要这样丑化你的代码，使得代码隐晦。这是那些 JavaScript 压缩工具会做的事情，你可以使用它们。</p>
<p>虽然代码比较短，但是这依然是具有可读性的。</p>
<h2 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h2><p>有很多种方式去进行类型转换，要怎么转换取决于你。这里有一些常用的方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// From anything to a number</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="string">"42"</span>;</div><div class="line"><span class="keyword">var</span> myNumber = +foo; <span class="comment">// shortcut for Number(foo)</span></div><div class="line"><span class="comment">// → 42</span></div><div class="line"></div><div class="line"><span class="comment">// Tip: you can convert it directly into a negative number</span></div><div class="line"><span class="keyword">var</span> negativeFoo = -foo; <span class="comment">// or -Number(foo)</span></div><div class="line"><span class="comment">// → -42</span></div><div class="line"></div><div class="line"><span class="comment">// From object to array</span></div><div class="line"><span class="comment">// Tip: `arguments` is an object and in general you want to use it as array</span></div><div class="line"><span class="keyword">var</span> args = &#123; <span class="number">0</span>: <span class="string">"foo"</span>, <span class="number">1</span>: <span class="string">"bar"</span>, <span class="attr">length</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(args)</div><div class="line"><span class="comment">// → [ 'foo', 'bar' ]</span></div><div class="line"></div><div class="line"><span class="comment">// Anything to boolean</span></div><div class="line"><span class="comment">/// Non non p is a boolean p</span></div><div class="line"><span class="keyword">var</span> t = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> f = <span class="number">0</span>;</div><div class="line">!!t</div><div class="line"><span class="comment">// → true</span></div><div class="line">!!f</div><div class="line"><span class="comment">// → false</span></div><div class="line"></div><div class="line"><span class="comment">/// And non-p is a boolean non-p</span></div><div class="line">!t</div><div class="line"><span class="comment">// → false</span></div><div class="line">!f</div><div class="line"><span class="comment">// → true</span></div><div class="line"></div><div class="line"><span class="comment">// Anything to string</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">42</span>;</div><div class="line"><span class="string">""</span> + foo <span class="comment">// shortcut for String(foo)</span></div><div class="line"><span class="comment">// → "42"</span></div><div class="line"></div><div class="line">foo = &#123; <span class="attr">hello</span>: <span class="string">"world"</span> &#125;;</div><div class="line"><span class="built_in">JSON</span>.stringify(foo);</div><div class="line"><span class="comment">// → '&#123; "hello":"world" &#125;'</span></div><div class="line"></div><div class="line"><span class="built_in">JSON</span>.stringify(foo, <span class="literal">null</span>, <span class="number">4</span>); <span class="comment">// beautify the things</span></div><div class="line"><span class="comment">// →</span></div><div class="line"><span class="comment">// '&#123;</span></div><div class="line"><span class="comment">//    "hello": "world"</span></div><div class="line"><span class="comment">// &#125;'</span></div><div class="line"></div><div class="line"><span class="comment">// Note you cannot JSON.stringify circular structures</span></div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">window</span>);</div><div class="line"><span class="comment">// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.</span></div></pre></td></tr></table></figure>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>对新项目，保持项目中的所有代码的风格相同。对于现有项目，使用现有项目的代码风格，除非你真的想去改变它。</p>
<p><strong>制定你的代码风格，并始终遵循它</strong></p>
<p>这里还有一些推荐的现有代码风格：</p>
<ul>
<li><a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">airbnb/javascript</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何减少浏览器回流]]></title>
      <url>http://www.ahonn.me/2016/08/02/javascript-reduce-the-browser-reflow/</url>
      <content type="html"><![CDATA[<h2 id="什么是浏览器回流"><a href="#什么是浏览器回流" class="headerlink" title="什么是浏览器回流"></a>什么是浏览器回流</h2><p>浏览器在显示网页时，需要计算每一个元素应该放置的位置，这个计算过程就称为浏览器回流（browser reflow）。回流会重新计算页面的布局，在回流中会重新计算元素的尺寸与位置，并且也会触发对子元素的回流。</p>
<p>触发浏览器回流的操作：</p>
<ul>
<li>在 DOM 中插入，移除或者更新元素</li>
<li>修改页面上的内容</li>
<li>移动 DOM 元素</li>
<li>修改元素 CSS 样式</li>
<li>修改元素的类名</li>
<li>调整窗口的大小</li>
</ul>
<a id="more"></a>
<p>基本上跟元素相关的操作都会触发浏览器回流。浏览器的回流需要耗时，尽量减少浏览器的回流，那么就可以提高整个网页的效率。</p>
<h2 id="创建单一元素"><a href="#创建单一元素" class="headerlink" title="创建单一元素"></a>创建单一元素</h2><p>当我们需要创建一个新元素插入到页面中，并且设置元素的属性。我们会这样做：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addElement</span>(<span class="params">parent, elementText</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">  parent.appendChild(element);</div><div class="line">  element.innerHTML = anchorText;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写会产生2次浏览器回流，新创建的元素在插入页面中之后又进行了属性的修改。更好的写法是把插入到页面的操作放到最后，这样给元素设置属性的操作就是在内存中进行的。这样就只有元素插入到页面时产生的一次回流。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addElement</span>(<span class="params">parent, elementText</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">  element.innerHTML = anchorText;</div><div class="line">  parent.appendChild(element);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建多个元素"><a href="#创建多个元素" class="headerlink" title="创建多个元素"></a>创建多个元素</h2><p>在实际的使用中，更多的情况是创建多个元素，并插入到页面中。按照创建单一元素插入到页面时的写法，我们会这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addElements</span>(<span class="params">parent, elementText</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">    element.innerHTML = anchorText;</div><div class="line">    parent.appendChild(element);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，这样写会产生10次回流，每一次插入元素都会产生一次。这时候我们需要用到 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment" target="_blank" rel="external">DocumentFragment</a>，DocumentFragment 有占位符的作用，可以暂时存放那些插入文档元素。</p>
<p>当把一个 DocumentFragment 插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。可以用 <code>Document.createDocumentFragment()</code> 方法创建新的空 DocumentFragment 节点。</p>
<p>通过 DocumentFragment 可以让上面的操作值产生一次浏览器回流：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addElements</span>(<span class="params">parent, elementText</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element,</div><div class="line">      fragment = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">    element.innerHTML = anchorText;</div><div class="line">    fragment.appendChild(element);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  parent.appendChild(fragment);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改元素样式"><a href="#修改元素样式" class="headerlink" title="修改元素样式"></a>修改元素样式</h2><p>在 JavaScript 中修改元素的样式也是经常会做的操作。修改元素的多个样式时会这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStyle</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  element.style.fontSize   = <span class="string">"14px"</span>;</div><div class="line">  element.style.fontWeight = <span class="string">"600"</span>;</div><div class="line">  element.style.color      = <span class="string">"#fff"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上，每一次对元素的样式的变更都会产生一次回流。好的做法是创建一个 class 包含这些样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.changeStyle</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStyle</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  element.className = <span class="string">'changeStyle'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>减少浏览器回流的方式，就是将一切能够在内存完成的完成之后再应用到页面中，对元素样式的操作尽量通过添加修改 CSS 类来实现。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组乱序的正确姿势]]></title>
      <url>http://www.ahonn.me/2016/07/25/the-right-way-to-array-of-random-sequence/</url>
      <content type="html"><![CDATA[<p>在 <code>underscore</code> 中有一个函数，其作用是将数组乱序排序，实现如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Shuffle a collection, using the modern version of the</span></div><div class="line"><span class="comment">// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).</span></div><div class="line"><span class="comment">// `shuffle` 函数。</span></div><div class="line">_.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> set = isArrayLike(obj) ? obj : _.values(obj);</div><div class="line">  <span class="keyword">var</span> length = set.length;</div><div class="line">  <span class="keyword">var</span> shuffled = <span class="built_in">Array</span>(length);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>, rand; index &lt; length; index++) &#123;</div><div class="line">    rand = _.random(<span class="number">0</span>, index);</div><div class="line">    <span class="keyword">if</span> (rand !== index) shuffled[index] = shuffled[rand];</div><div class="line">    shuffled[rand] = set[index];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> shuffled;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其中使用的数组乱序的算法是 <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="external">Fisher–Yates shuffle</a>。这是一个 O(n) 复杂度的随机排列数组元素的经典算法。</p>
<p>每次循环从前面的 <code>index</code> 个元素中随机选择一个元素 <code>shuffle[rand]</code>。将这个元素与第 <code>index</code> 个元素进行交换，直到 <code>index == length</code> 为止。这样对元素进行随机交换，对于每个结果所获得概率是均匀的。<code>_.shuffle</code> 方法是返回一个新的乱序数组，所以需要一个新的数组来存储。</p>
<p>对原有数组进行乱序：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> length = arr.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>, rand; index &lt; length; index ++) &#123;</div><div class="line">    rand = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (length - <span class="number">1</span>));</div><div class="line"></div><div class="line">    <span class="keyword">var</span> temp = arr[rand];</div><div class="line">    arr[rand] = arr[index];</div><div class="line">    arr[index] = temp;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>More</strong></p>
<ul>
<li><a href="https://github.com/hanzichi/underscore-analysis/issues/15" target="_blank" rel="external">JavaScript 数组乱序</a></li>
<li><a href="https://www.h5jun.com/post/array-shuffle.html" target="_blank" rel="external">数组的完全随机排列</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Underscore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浪矢杂货店]]></title>
      <url>http://www.ahonn.me/2016/07/24/langshi-grocery-store/</url>
      <content type="html"><![CDATA[<p>解忧杂货店，零零散散的在地铁上看完了这本之前一直听到却没有去看的小说。其实几天前想写这篇读书笔记的，一直被拖延至今。</p>
<p>爱情公寓中有一集曾小贤说了这样一句话。当面对两个选择时，抛硬币总能奏效，并不是因为它总能给出对的答案，而是在你把它抛在空中的那一秒里，你突然知道你希望它是什么。就像是那些向浪矢杂货店投递烦恼信件一样，其实真正来向浪矢爷爷咨询的人大多心里已经有了答案。只是自己没有发现，当杂货店回信中的建议并不像所期望的回答的时候，咨询者就发现自己想要的那个答案。<br><a id="more"></a></p>
<blockquote>
<p>我咨询多年，终于了解到一件事。通常咨询者心里已经有了答案，找人咨询的目的，只是为了确认这个答案是正确的。所以，有些咨询者在看了我的回信后，会再写信给我，可能是我的回答和他原本想的不一样。</p>
</blockquote>
<p>我想，面对选择的时候抛硬币大部分时候都会奏效。有时候抛起硬币，掉落下来，整一个过程脑袋一片空白，完全不知道希望它是什么。但其实那一片空白中一闪而过的那个念头就是我们想要的，只是没有发现。</p>
<p>虽然的确能够作出选择，但是有时在作出了选择过后，我却总会想着当时如果作出另外的一个选择的话会是什么样的呢。</p>
<p>围绕着浪矢杂货店，人与人之间错综复杂的羁绊构成了整本书的故事线，就像是蝴蝶效应一般。每个人不经意间的选择和行为，都像投入水面的石子一样，造成了持续不断的涟漪，这些涟漪不断扩大，渐渐形成了牢不可破的羁绊，过去未来终于交汇。就像是浪矢杂货店对烦恼咨询者的回信一样，或许选择了另外一种建议，故事是不是又会不一样呢？我想，即使作出了不同的选择，那个牢不可破的羁绊依然还会那样存在吧。</p>
<p>书中有句话特别适合现在的我，<strong>“虽然走起来并不是一帆风顺，但我觉得那是因为我活着，才会感受到这些痛楚，所以克服了重重困难。”</strong>所以只要是活着总是难免会感受到痛楚，所以才要克服这些困难，这样才是活着。有些经历总是必须的，不然活着就像死了一样不是吗？</p>
<blockquote>
<p>如果说，来找我咨询烦恼的人是迷途的羔羊，通常他们手上都有地图，却没有看地图，或是不知道自己目前的位置。<br>但我相信你不属于任何一种情况，你画的地图是一张白纸，所以，即使想决定目的地，也不知道路在哪里。<br>地图是白纸当然很伤脑筋，任何人都会不知所措。<br>但是不妨换一个角度思考，正因为是白纸，所以可以画任何地图，一切都掌握在你自己手上。你很自由，充满了无限可能。这是很棒的事，我衷心祈祷你可以相信自己，无悔地燃烧自己。</p>
</blockquote>
<p>这是书中对于白纸的回信，这个回答对于所有人都算是解答吧。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 中使用 highlight.js]]></title>
      <url>http://www.ahonn.me/2016/07/13/getting-highlightjs-to-work-with-vue.js/</url>
      <content type="html"><![CDATA[<p>今天遇到一个问题：在使用 vue 的练手项目中，渲染的 HTML 里 <code>&lt;code&gt;</code> 标签中的代码没有代码高亮。</p>
<p>遂想到用 highlight.js 来解决，按照平常那样在 HTML 文件中引入 <code>js</code> 和 <code>css</code> 文件，然后在<code>&lt;header&gt;</code> 中加上一句 <code>&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</code>。但是却没有效果。</p>
<p>在 Vue.js 的论坛上找到了解决方案 <a href="https://forum.vuejs.org/topic/3514/getting-highlightjs-to-work-with-vue-router" target="_blank" rel="external">Getting highlightjs to work with vue-router</a>。highlight.js 没有效果是因为使用了 <code>vue-route</code>，在 route 改变时，页面将会重新渲染并且会移除事件，这里就把 highlight 的事件给移除了。<br><a id="more"></a></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>所以得到的解决方案是，使用 Vue.js 的自定义指令，定义一个叫做 <code>v-highlight</code> 的指令来使得 <code>&lt;pre&gt;&lt;code&gt; .. &lt;/code&gt;&lt;/pre&gt;</code> 中的代码高亮。</p>
<p>定义自定义指令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Hljs <span class="keyword">from</span> <span class="string">'highlight.js'</span></div><div class="line"></div><div class="line">Vue.directive(<span class="string">'highlightjs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> blocks = <span class="keyword">this</span>.el.querySelectorAll(<span class="string">'pre code'</span>);</div><div class="line">  <span class="built_in">Array</span>.prototype.forEach.call(blocks, Hljs.highlightBlock);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这里 import 了 highlight.js，所以需要 <code>npm install highlight.js</code>。导入之后使用 <code>Vue.directive()</code> 定义 <code>v-highlightjs</code> 指令，获取使用该指令的 document 中的 <code>pre  code</code> 部分，并使用 highlight.js 的 <code>highlightBlock</code> 使其高亮。</p>
<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>之后在需要高亮的地方，使用 <code>v-highlightjs</code> 指令即可用使得其中的 <code>&lt;pre&gt;&lt;code&gt; .. &lt;/code&gt;&lt;/pre&gt;</code> 部分高亮。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"your_content"</span> <span class="attr">v-highlightjs</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 实现垂直居中]]></title>
      <url>http://www.ahonn.me/2016/06/29/vertical-center-for-css/</url>
      <content type="html"><![CDATA[<p>我们有这样一个结构的 HTML：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"children"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我们要实现 <code>.children</code> 在 <code>.parent</code> 中垂直居中。</p>
<p>通常第一印象会想起给父元素设置相对定位，给子元素设置绝对定位。这样子元素就相对于父元素定位，再通过 <code>top</code> 与 <code>left</code> 各偏移 50% 父元素宽度，使用 <code>margin-*</code> 来修正子元素的位置。<br><a id="more"></a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.chilren</span> &#123;</div><div class="line">  <span class="attribute">width</span>: $width;</div><div class="line">  <span class="attribute">height</span>: $height;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -$height/<span class="number">2</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -$width/<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种方式可以使得子元素在父元素中垂直居中。但是这种实现的方式需要知道子元素的宽高，以方便使用 <code>margin-*</code> 来修正之前的位置。</p>
<p>当不知道子元素的宽高时，这种方法就无法实现正真的垂直居中。这个时候就可以使用 <code>transform: translate(-50%, -50%);</code> 来实现子元素自身的偏移。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.chilren</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么不使用定位是否能够使元素垂直居中呢？</p>
<p>这时候我们来想想要使元素水平居中的时候，我们会怎么做？Ok，一般我们都会用 <code>margin: 0 auto</code>;那么我们就可以让 <code>margin-top: 50%</code>, 这样的效果就跟相对定位时的 <code>top: 50%</code> 的效果差不多。接着就可以使用之前使用过的 <code>transform</code> 属性来使得元素向上偏移自身高度的一半，也就是 <code>transform: translateY(-50%);</code>。</p>
<p>这样就可以实现不使用定位来来使得元素垂直居中了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.chilren</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">50%</span> auto <span class="number">0</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了上面的这些方法之外，还可以使用 Flexbox 布局来实现。</p>
<p>只需要在父元素中使用 <code>display: flex;</code>，然后在子元素上使用 <code>margin: auto;</code> 就可以实现垂直居中了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.chilren</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还有几种实现垂直居中的方法，并不常见与常用，使用就不提了。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass 初探]]></title>
      <url>http://www.ahonn.me/2016/06/07/sass-preliminary-study/</url>
      <content type="html"><![CDATA[<h2 id="为什么学-Sass"><a href="#为什么学-Sass" class="headerlink" title="为什么学 Sass"></a>为什么学 Sass</h2><p>说起来其实很早就知道 <code>Sass</code> 这东西。刚开始写 Even 这个博客主题的时候就有在考虑是要用 <code>Less</code> 还是<code>Sass</code>，最后用了变量名用 <code>@</code> 开头的 Less（可能是 PHP 的原因，对 <code>$</code> 开头的变量名没什么好感）。</p>
<p>最近正在看 <code>Foundation</code>，源码是用 Sass 写的。<code>Bootstrap</code> 之前也是用 Less 的，不过后来也转向了 Sass。然后发现 <code>Foundation</code> 写得挺不错的，看看博客主题写的代码，简直不能看。正好打算把主题给重构重构，就顺手学学 Sass，用 Sass 写。<br><a id="more"></a></p>
<h2 id="Sass-是什么"><a href="#Sass-是什么" class="headerlink" title="Sass 是什么"></a>Sass 是什么</h2><p>Sass 是CSS的扩展，增加了规则嵌套、变量、混合、选择器继承等等，通过使用命令行的工具把它转换成CSS代码，能够更编程语言化的写 CSS。</p>
<p>Sass 有两种语法，<code>Sass</code> 与 <code>SCSS</code>。<code>Sass</code> 使用的是类似于 Python 的缩进语法，而 <code>SCSS</code> 使用的语法与 CSS 相近，只是添加了一些其他的东西，可以看做是 CSS 超集。</p>
<p>PS: 使用 <code>SCSS</code> 语法的文件后缀是 <code>SCSS</code> （一定是大写）。</p>
<h2 id="SCSS-语法"><a href="#SCSS-语法" class="headerlink" title="SCSS 语法"></a>SCSS 语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>上面说了，刚开始我不用 Sass 的原因就是变量名是以 <code>$</code> 开头的。与 Less 不同的是，Sass 的变量赋值使用的是 <code>:</code>，跟 CSS 的属性赋值相同。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="variable">$fontSize</span>: <span class="number">14px</span>;</div><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// css style</span></div><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sass 还支持多值变量，list 类型与 map 类型，与 JavaScript 中的 list, map 相似。</p>
<p>list 类型可以使用 <code>nth($list, $index)</code> 来取得 list 中的某个值，相同的 map 也有对应的取值的函数：<code>map-get($map, $key)</code>。</p>
<p>list 类型：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="variable">$color-list</span>: <span class="number">#fff</span>, <span class="number">#000</span>;</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: nth(<span class="variable">$color-list</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">  &amp;:hover &#123;</div><div class="line">    <span class="attribute">color</span>: nth(<span class="variable">$color-list</span>, <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>map 类型：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="variable">$color-map</span>: (</div><div class="line">  white: <span class="number">#fff</span>,</div><div class="line">  black: <span class="number">#000</span></div><div class="line">);</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$color-map</span>, white);</div><div class="line"></div><div class="line">  &amp;:hover &#123;</div><div class="line">    <span class="attribute">color</span>: map-get(<span class="variable">$color-map</span>, black);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>与大部分 CSS 预处理器相同，Sass 也支持层级嵌套。这样可以更好的表示 CSS 的层级关系。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line"></div><div class="line">  <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// css style</span></div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>Sass 中使用 <code>@mixin</code> 声明混合，可以传递参数，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sass style</span></div><div class="line">@<span class="keyword">mixin</span> center-block &#123;</div><div class="line">    <span class="attribute">margin-left</span>:auto;</div><div class="line">    <span class="attribute">margin-right</span>:auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">    @<span class="keyword">include</span> center-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//css style</span></div><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>:auto;</div><div class="line">    <span class="attribute">margin-right</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><p>一般的 CSS 是没有条件与循环的，拥有了条件与循环语句的 Sass 更加的灵活，可以使得 CSS 样式根据变量而改变。</p>
<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>Sass 中的条件语句为 <code>@if</code> 与 <code>@else</code>, 可以组合成为 <code>@else if</code>。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="variable">$color</span>: white;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  @<span class="keyword">if</span> <span class="variable">$color</span> == white &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  &#125;</div><div class="line">  @<span class="keyword">else</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// css style</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>for循环有两种形式，分别为：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code>。<code>through</code> 与 <code>to</code> 的区别是循环包不包括 <code>&lt;end&gt;</code>。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</div><div class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// css style</span></div><div class="line"><span class="selector-class">.item-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">6em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>each循环语法为：<code>@each $var in &lt;list or map&gt;</code>，与 JavaScript 中的 <code>each</code> 类似，即是遍历 list 或者 map。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sass style</span></div><div class="line"><span class="variable">$color-list</span>: red green yellow;</div><div class="line">@<span class="keyword">each</span> <span class="variable">$color</span> in <span class="variable">$color-list</span> &#123;</div><div class="line">  .#&#123;<span class="variable">$color</span>&#125; &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// css style</span></div><div class="line"><span class="selector-class">.red</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.green</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.yellow</span> &#123;</div><div class="line">  <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Nokogiri 解析 HTML]]></title>
      <url>http://www.ahonn.me/2016/05/28/using-nokogiri-parsing-html/</url>
      <content type="html"><![CDATA[<p>Nokogiri 是 Ruby 的一个 HTML/XML 文件的解析库。在需要解析 HTML/XML 文件获取数据时，它是一个很好的选择。</p>
<h2 id="解析-HTML-文档"><a href="#解析-HTML-文档" class="headerlink" title="解析 HTML 文档"></a>解析 HTML 文档</h2><p>使用 <code>Nokogiri</code> 解析 HTML 将会生成 <code>Nokogiri documens</code>。<br>生成该对象的方式有三种，分别是通过字符串解析，通过文件解析，通过网络解析。</p>
<h3 id="通过字符串解析"><a href="#通过字符串解析" class="headerlink" title="通过字符串解析"></a>通过字符串解析</h3><p>通过字符串解析，即是将字符串当作函数的参数传给 <code>Nokogiri::HTML</code> 函数。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doc = Nokogiri::HTML(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Ahonn&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span>)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="通过文件解析"><a href="#通过文件解析" class="headerlink" title="通过文件解析"></a>通过文件解析</h3><p>通过文件解析需要打开文件，并将文件内容当作参数。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doc = File.open(<span class="string">"index.html"</span>) &#123; <span class="params">|f|</span> Nokogiri::HTML(f) &#125;</div></pre></td></tr></table></figure></p>
<h3 id="通过网络解析"><a href="#通过网络解析" class="headerlink" title="通过网络解析"></a>通过网络解析</h3><p>这是最常用的形式，即使用 <code>open-uri</code> 打开对应的网址，并返回字符串给 <code>Nokogiri</code>。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">"open-uri"</span></div><div class="line">doc = Nokogiri::HTMl(open(<span class="string">"http://www.ahonn.me"</span>))</div></pre></td></tr></table></figure></p>
<h2 id="搜索-HTML-文档"><a href="#搜索-HTML-文档" class="headerlink" title="搜索 HTML 文档"></a>搜索 HTML 文档</h2><p>Nokogiri 提供 xpath 以及 css 选择器这两种方式来搜索 HTML 文档，使得我们能够获取到对应的需要的节点及数据。</p>
<p><code>xpath</code> 方法以及 <code>css</code> 方法返回的是一个节点结果集。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">doc = Nokogiri::HTML(open(<span class="string">"http://www.ahonn.me"</span>))</div><div class="line"></div><div class="line">doc.xpath(<span class="string">"//title"</span>)</div><div class="line"></div><div class="line">doc.css(<span class="string">".nav-list a"</span>)</div><div class="line"></div><div class="line"><span class="comment"># ['&lt;a href="/" target="_self" class="nav-list-link active"&gt;Home&lt;/a&gt;',</span></div><div class="line"><span class="comment"># '&lt;a href="/archives/" target="_self" class="nav-list-link"&gt;Archives&lt;/a&gt;',</span></div><div class="line"><span class="comment"># '&lt;a href="/tags/" target="_self" class="nav-list-link"&gt;Tags&lt;/a&gt;',</span></div><div class="line"><span class="comment"># '&lt;a href="/about/" target="_self" class="nav-list-link"&gt;About&lt;/a&gt;']</span></div></pre></td></tr></table></figure>
<h3 id="获取单个结果"><a href="#获取单个结果" class="headerlink" title="获取单个结果"></a>获取单个结果</h3><p>如果想要返回单个结果，可以使用 <code>at_xpath</code> 或者 <code>at_css</code> 方法来获取结果集中的第一个元素。<br>就是说返回的不再是结果集，而是元素节点。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">doc.at_css(<span class="string">".nav-list a"</span>)</div><div class="line"><span class="comment"># &lt;a href="/" target="_self" class="nav-list-link active"&gt;Home&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取元素属性"><a href="#获取元素属性" class="headerlink" title="获取元素属性"></a>获取元素属性</h3><p>还可通过 <code>.</code> 或者索引来获取元素的属性：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">links = doc.css(<span class="string">".nav-list a"</span>)</div><div class="line"></div><div class="line">puts links.length <span class="comment"># 4</span></div><div class="line">puts links[<span class="number">0</span>].text <span class="comment"># Home</span></div><div class="line">puts links[<span class="number">1</span>][<span class="string">'href'</span>] <span class="comment"># /archives/</span></div></pre></td></tr></table></figure></p>
<h3 id="限制选择器"><a href="#限制选择器" class="headerlink" title="限制选择器"></a>限制选择器</h3><p>Nokogiri 还提供了自定义筛选的限制选择器，返回结果集中符合条件的元素：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">links = doc.css(<span class="string">".nav-list a"</span>).select&#123; <span class="params">|link|</span> link[<span class="string">'href'</span>] == <span class="string">"/archives/"</span> &#125;</div><div class="line"></div><div class="line">links.each &#123; <span class="params">|link|</span> puts link.text &#125;  <span class="comment"># Archives</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nokogiri </tag>
            
            <tag> Ruby </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 JavaScript 实现简单的拖拽]]></title>
      <url>http://www.ahonn.me/2016/05/14/use-javascript-to-achieve-simple-drag-and-drop/</url>
      <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>使用 JavaScript 实现拖拽的步骤：</p>
<ul>
<li>让元素捕获事件（mousedown, mousemove &amp; mouseup）</li>
<li>单击并不释放，触发 mousedown，标记开始拖拽，并获取元素和鼠标的位置</li>
<li>拖动鼠标，触发 mousemove，不断的获取鼠标的位置，并通过计算重新确定元素的位置</li>
<li>释放师表，触发 mouseup，结束拖拽，确定元素位置并更新</li>
</ul>
<p><strong>被拖拽的元素必须是相对父元素定位，或者是绝对定位</strong></p>
<a id="more"></a>
<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/Lr73mn89/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>首先，对拖拽的元素绑定 mousedown 时间，使其触发对应的函数，获取元素与鼠标的位置。在 document 对象上绑定 mousemove 和 mouseup 事件，不在拖拽的元素上绑定是因为当鼠标移动太快而超出元素的范围时会停止拖拽，而绑定在 document 上则可以避免这样的事情发生。拖拽再快都不会超出 document 的范围。</p>
<p>绑定事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line"></div><div class="line">box.onmousedown = down;</div><div class="line"><span class="built_in">document</span>.onmousemove = move;</div><div class="line"><span class="built_in">document</span>.onmouseup = up;</div></pre></td></tr></table></figure></p>
<h2 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h2><p>鼠标位置可以在 event 对象中获得，常用的属性有：</p>
<ul>
<li>clientX / clientY : 相对浏览器窗口坐标</li>
<li>offsetX / offsetY : 相对事件目标对象坐标</li>
<li>pageX / pageY : 相对 document 对象坐标</li>
</ul>
<p>一般鼠标的位置使用 <code>pageX / pageY</code> 获取，但是 IE 不支持这两个属性。所以在 IE 中使用 <code>event.clientX + document.body.scrollLeft - document.body.clientLeft;</code> 获取鼠标的位置。</p>
<p>获取鼠标位置的函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMouseXY</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</div><div class="line">  e = e || <span class="built_in">window</span>.event;</div><div class="line">  <span class="keyword">if</span> (e.pageX) &#123;</div><div class="line">    x = e.pageX;</div><div class="line">    y = e.pageY;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    x = e.clientX + <span class="built_in">document</span>.body.scrollLeft - <span class="built_in">document</span>.body.clientLeft;</div><div class="line">    y = e.clientY + <span class="built_in">document</span>.body.scrollTop - <span class="built_in">document</span>.body.clientTop;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">x</span>: x,</div><div class="line">    <span class="attr">y</span>: y</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="事件触发函数"><a href="#事件触发函数" class="headerlink" title="事件触发函数"></a>事件触发函数</h3><h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown"></a>mousedown</h4><p>当鼠标移动到元素内并点击元素不放时，触发 mousedown 事件。按照上面的步骤，这一步是获取元素与鼠标的位置，用于触发 mousemove 时计算元素的位置。</p>
<p>mousedown 触发的函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  dragging = <span class="literal">true</span>;</div><div class="line">  boxX = box.offsetLeft;</div><div class="line">  boxY = box.offsetTop;</div><div class="line">  mouseX = <span class="built_in">parseInt</span>(getMouseXY(e).x);</div><div class="line">  mouseY = <span class="built_in">parseInt</span>(getMouseXY(e).y);</div><div class="line">  offsetX = mouseX - boxX;</div><div class="line">  offsetY = mouseY - boxY;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>boxX / boxY</code> 为元素左上角相对于已定位的父元素（相对或者绝对定位的父元素）的偏移的像素值，即元素左上角的坐标。</p>
<p><code>mouseX / mouseY</code> 是通过 <code>getMouseXY</code> 函数获得的鼠标的坐标。</p>
<p><code>offsetX/ offsetY</code> 是鼠标相对于元素坐标（左上角坐标）的坐标。</p>
<h4 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove"></a>mousemove</h4><p>当鼠标移动时，不断的获取鼠标的位置，并计算元素的新坐标修改元素的位置样式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (dragging) &#123;</div><div class="line">    <span class="keyword">var</span> x = getMouseXY(e).x - offsetX;</div><div class="line">    <span class="keyword">var</span> y = getMouseXY(e).y - offsetY;</div><div class="line">    <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth - box.offsetWidth;</div><div class="line">    <span class="keyword">var</span> height = <span class="built_in">document</span>.documentElement.clientHeight - box.offsetHeight;</div><div class="line"></div><div class="line">    x = <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(<span class="number">0</span>, x), width);</div><div class="line">    y = <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(<span class="number">0</span>, y), height);</div><div class="line"></div><div class="line">    box.style.left = x + <span class="string">'px'</span>;</div><div class="line">    box.style.top = y + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量 <code>width / height</code> 表示可移动的位置的大小，这里是 document 减去元素的大小（元素不会超出可移动的范围）。</p>
<p><code>Math.min</code> 使得元素不会超出可移动访问的右边界（元素 x 坐标不会超过 width），<code>Math.max</code> 使得元素不会超出可移动范围的左边界（元素的 x 坐标不小于 0）。</p>
<p>最后将改变后的元素 <code>left</code> 与 <code>top</code> 值应用当元素上，即修改元素的样式。</p>
<h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup"></a>mouseup</h4><p>拖拽结束，取消拖拽的标记。使其触发 mousemove 事件，但不做任何处理。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  dragging = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面使用的简单的 JavaScript 代码实现了元素的拖拽，但并没有对兼容性问题全面考虑，也没有对性能优化，有不必要的事件触发。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记第一次面试]]></title>
      <url>http://www.ahonn.me/2016/05/14/the-first-interview/</url>
      <content type="html"><![CDATA[<blockquote>
<p>记录第一次面试 流水账 想到什么写什么</p>
</blockquote>
<p>第一次正正经经的去面试，虽然只是个软件开发暑期实习生。</p>
<p>刚开始是在网上无聊的逛 V2EX 什么的，然后看了看 conde 社区。后来神不知鬼不觉的不知道为什么就跑到了 Ruby China 去了，又神不知鬼不觉的跑去看了招聘的版块。</p>
<p>其实在这之前的两个星期都有在拉钩上投实习，虽然有几个简历通过了，但是却毫无沟通的直接定了面试时间。不是刚刚好顶到上课时间，就是早上 10 点的（也就是说我得早上 7 点起床赶去广州面试）。说实在的对那些公司兴趣也不是很大。<br><a id="more"></a></p>
<p>后来就如上所说的，在逛 Ruby China 招聘板块的时候，看到了广州的一家公司招暑假实习生的帖子。遂留言问问看招不招大二的，说是招大二的。看了看条件，感觉也好像没有什么条件，大概是大二吧，可能就是对技术有兴趣，自学能力强一点的就 OK 了。跟之前拉钩上投的公司不一样，不会感觉很单调死板看不到特色。帖子贴了很多照片，感觉是一群很有趣的人，应该是个实习的好去处呢。</p>
<p>说是要中英文简历，那时候正好也刚写好了在线简历，不过倒是没有英文版呢。一直惦记着要投简历去那家公司，但是又一直拖啊拖的没有去写英文版。大概拖了 3 天，那天下午把英文的给加上了，然后就简历发过去了。之后那边回了邮件，还是用的英文回的。说是什么现在在越南，五月初回来广州会联系我。回英文邮件还真是头疼，纠结了大半天。</p>
<p>然后就是等啊等啊等啊。</p>
<p>上周接了该公司一个姐姐的电话，问我说下周什么时候有空面试。然后我很果断的说了下周三（我忘记了下周补课这回事了），挂了电话之后直接懵逼了。。。光这点就给好评了，那些直接定时间真的让我好难办啊。后面到了面试的那天，本来打算早上上完课吃完饭就直接出发的，可是肚子这个时候不舒服，回了下宿舍。结果就错过了本来计划好的那班公交车，坐了下一班，导致面试迟到了，妈个鸡。</p>
<p>面试地点本来是在公司的，后面说是隔壁装修声音太大，改到了一个小咖啡馆里。话说这咖啡馆还真是难找，绕了两圈才找到。进门看见两个人用着 Macbook 写代码，应该是面试官了（因为没有其他人了）。接着就是先做一个钟的笔试题，拿到的瞬间有点懵逼…居然是全英文的…不过还好平时也有看看英文的文档什么的，看得懂七七八八。Ruby 跟 Rails 部分几乎不会，只过了一遍 Rails Guides 里的入门教程。然后 JavaScript 也是挺懵逼的，都是用 JQuery（果然还是得去搞搞 jQuery 啊）。最后面也只是写了个实现其他编程语言中的 pow 函数，可能是太紧张了，忘记考虑指数为负的情况了。好弱鸡…还有用 jQuery 实现 DOM 拖拽的，瞄过几眼，但是压根没办法直接写出来啊，找个时间的好好看看。</p>
<p>手写代码果然还是觉得好别扭…</p>
<p>笔试真的是绝对的懵逼，我给自己打 20 分。不过后面面试倒是很轻松，感觉好像没问什么东西，纯瞎聊得感觉。不过说得很对，我的确是缺个能带的人。虽然自己有一些想法，但是总是没办法起手开搞。那些所谓的项目也都是自己觉得好玩搞的，都没有一个算是实实际际的项目的。</p>
<p>总结一下面试，就是从笔试题跟简历入手去问。好像面试我的时候没问什么东西，面试过程倒是挺愉快的。不过感觉招大二的话好像不是很看重笔试题，跟看重对技术的热情？毕竟 Ruby 什么的是可以学的。</p>
<p>昨天小伙伴 yzz 也去那里面试，不过面试地点这一次就没有改了。正好下午也只是一节体育课，就跟着去了，去看看公司长啥样。第一感觉是家庭小作坊，类似美剧硅谷里面他们的那种环境，感觉很赞啊。要是像正常的公司那样的话，感觉融入感不强。这样的地方实习感觉会很开心啊。Boss 是个黑人，工位也和普通员工一样。yzz 做笔试题的时候好像听到 Boss 说什么什么 coding 什么的，Boss 好像也是撸代码的呢，不错。每个人的工作环境就是理想中的那样，外接大屏幕，舒服的椅子，有些有机械键盘，这样的编码环境完美。</p>
<p>哦，对了。好像刚进去的时候有一股榴莲味，估计是中午的饭后水果呢。比较自由的感觉，给人一种小家庭的feel。不过面试过程好像比面试我要问得多，小伙伴也可能因为紧张，原来懂得东西都不知道该怎么说了，我都替他紧张了。倒是面试过程也不是很严肃，面试官换了一个，不过也觉得挺 nice 的。面试完之后一个姐姐带着我们逛了一下里面（应该是打电话发邮件确定面试的那位？），然后就走啦。走的时候他们都坐在沙发上聊天吃东西呢好像，越来越觉得 nice 了。要是能通过的话估计实习会收获很多啊，不管什么方面。</p>
<p>流水账般的写完了，小学语文水平…天…</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 实习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从 optimizeCb 说起]]></title>
      <url>http://www.ahonn.me/2016/05/03/starting-from-the-optimizeCb/</url>
      <content type="html"><![CDATA[<h2 id="optimizeCb"><a href="#optimizeCb" class="headerlink" title="optimizeCb"></a>optimizeCb</h2><p>在 <code>underscore</code> 中的内部函数 <code>optimizeCb</code>，顾名思义就是 optimize callback，即优化回调函数。</p>
<p>optimizeCb:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Internal function that returns an efficient (for current engines) version</span></div><div class="line"><span class="comment">// of the passed-in callback, to be repeatedly applied in other Underscore</span></div><div class="line"><span class="comment">// functions.</span></div><div class="line"><span class="keyword">var</span> optimizeCb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context, argCount</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (context === <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> func;</div><div class="line">  <span class="keyword">switch</span> (argCount == <span class="literal">null</span> ? <span class="number">3</span> : argCount) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, value);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// The 2-parameter case has been omitted only because no current consumers</span></div><div class="line">    <span class="comment">// made use of it.</span></div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, index, collection</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, value, index, collection);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">accumulator, value, index, collection</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, accumulator, value, index, collection);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(context, <span class="built_in">arguments</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>它是这样处理回调的，当回调函数指定上下文环境时，根据 <code>argCount</code> 来分情况使用 <code>call</code>，不同情况的<br>区别只是 <code>call</code> 除了上下文环境之外的函数参数的个数不同。</p>
<p>除了参数个数为 1，3，4 使用 <code>call</code> 之外，其他情况使用 <code>apply</code>。这里原本存在的参数个数为 2 的<br>情况被删除了，原因是因为参数为 2 个的情况在 <code>underscore</code> 中基本没有。就是说，对于常用的情况<br>使用 <code>call</code>，而不常用的使用 <code>apply</code>。</p>
<p>那么是不是 <code>call</code> 的性能相较于 <code>apply</code> 更好呢？</p>
<h2 id="call-与-apply-的性能"><a href="#call-与-apply-的性能" class="headerlink" title="call 与 apply 的性能"></a>call 与 apply 的性能</h2><p>使用 <code>optimizeCb</code> 与只使用 <code>apply</code> 的 <code>Cb</code> 进行比较</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Benchmark = <span class="built_in">require</span>(<span class="string">'benchmark'</span>);</div><div class="line"><span class="keyword">var</span> suite = <span class="keyword">new</span> Benchmark.Suite;</div><div class="line"></div><div class="line"><span class="keyword">var</span> optimizeCb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context, argCount</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (context === <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> func;</div><div class="line">  <span class="keyword">switch</span> (argCount == <span class="literal">null</span> ? <span class="number">3</span> : argCount) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, value);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, index, collection</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, value, index, collection);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">accumulator, value, index, collection</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> func.call(context, accumulator, value, index, collection);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(context, <span class="built_in">arguments</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Cb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(context, <span class="built_in">arguments</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">suite</div><div class="line">  .add(<span class="string">'optimizeCb'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    optimizeCb(sum, <span class="keyword">this</span>, <span class="number">3</span>)(<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>);</div><div class="line">  &#125;)</div><div class="line">  .add(<span class="string">'Cb'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    cb(sum, <span class="keyword">this</span>)(<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>);</div><div class="line">  &#125;)</div><div class="line">  .on(<span class="string">'cycle'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>(event.target));</div><div class="line">  &#125;)</div><div class="line">  .on(<span class="string">'complete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Fastest is '</span> + <span class="keyword">this</span>.filter(<span class="string">'fastest'</span>).map(<span class="string">'name'</span>));</div><div class="line">  &#125;)</div><div class="line">  .run(&#123; <span class="string">'async'</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure>
<p>测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">optimizeCb x 16,373,430 ops/sec ±0.93% (80 runs sampled)</div><div class="line">cb x 8,729,305 ops/sec ±1.12% (90 runs sampled)</div><div class="line">Fastest is optimizeCb</div></pre></td></tr></table></figure></p>
<p>得出 <code>call</code> 在知道参数个数的时候比使用 <code>apply</code> 效率更高的结论。<br>通过搜索，找到了一篇 <a href="http://blog.csdn.net/zhengyinhui100/article/details/7837127" target="_blank" rel="external">call和apply性能对比</a>。</p>
<p>更严谨的说法是，当有this指向或者执行参数时，call的性能要明显优于apply。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以在编程过程中，如果要使用到 <code>call</code> 或者 <code>apply</code>，在知道参数个数的情况下，使用 <code>call</code> 是<br>一个好选择，使得编译器能够去优化。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Underscore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不合常理的变量提升]]></title>
      <url>http://www.ahonn.me/2016/04/28/javascript-hoisting/</url>
      <content type="html"><![CDATA[<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><h3 id="合乎常理的预期"><a href="#合乎常理的预期" class="headerlink" title="合乎常理的预期"></a>合乎常理的预期</h3><p>按照合乎常理的预期，程序应该是由上至下一行一行执行的，如果使用了之前没有定义的变量的话，正确的反应应该是会报错，就象下面这段 C++ 代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, &amp;n);  <span class="comment">// Error</span></div><div class="line"></div><div class="line">  <span class="keyword">int</span> n = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="并不完全正确"><a href="#并不完全正确" class="headerlink" title="并不完全正确"></a>并不完全正确</h3><p>实际上合乎常理的预期并不是“完全正确”的，在 JavaScript 中并不符合直觉。</p>
<p>例如这段 JavaScript 代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(n);</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="number">2</span>；</div></pre></td></tr></table></figure>
<p>讲道理，就直觉来说这段代码应该是会报错的。但是 JavaScript 却不是像往常的其他编程语言一样报错，而是输出 undefined。</p>
<p>先把问题留着，再看看另一段代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(n);</div><div class="line"></div><div class="line">n = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>这段代码的输出同样也是 undefined，实际上这两段代码在编译器上是没有差别的，第一段代码实际上是按照第二段代码那样执行的。就像是变量的声明部分从原来的位置移动到了当前作用域最顶部，这个过程就叫作 <strong>提升</strong>。只有声明本身会被提升，而赋值操作依旧会留着原地。</p>
<h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>函数在声明时也会像变量一样被提升。但是不同的是，函数表达式不会被提升。</p>
<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数声明提升：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(n);</div><div class="line">  <span class="keyword">var</span> n = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际上代码将会按照下面的形式执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> n;</div><div class="line">  <span class="built_in">console</span>.log(n);</div><div class="line">  n = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<p>函数 <code>foo</code> 的作用域内的变量 <code>n</code> 提升到了作用域的顶部，全局作用域里的 <code>foo</code> 函数声明也会被提前到所处的作用域顶部，即全局作用域的顶部。但是函数表达式的话只有变量被声明，但是赋值给变量的函数不会被提升。</p>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式不会被提升：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数表达式的提升类似与变量的提升：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo;</div><div class="line"></div><div class="line">foo(); <span class="comment">// TypeError</span></div><div class="line"></div><div class="line">foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样会引发 <code>TypeError</code> 异常，因为当时的 <code>foo</code> 并没有赋值，对 <code>undefined</code> 进行函数调用会导致非法操作抛出异常。</p>
<h3 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h3><p>函数会首先被提升，然后跟着才是变量。也就是说同时存在函数声明与函数表达式时，函数声明会优先于函数表达式提升。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码将会被理解成下面的形式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"></div><div class="line">foo(); <span class="comment">// 1</span></div><div class="line"></div><div class="line">foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以实际上的输出是 1，因为函数表达式的赋值操作会在原来的位置，而声明操作则是提升到作用域顶部，但是优先级低于函数声明。</p>
<p>重复声明同名变量在 JavaScript 非严格模式中将会被忽略，所以实际上函数表达式的位置并没有改变。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事件流：冒泡与捕获]]></title>
      <url>http://www.ahonn.me/2016/04/16/javascript-event-stream/</url>
      <content type="html"><![CDATA[<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流描述的是从页面中接收事件的顺序。在 JavaScript 中事件流有两种，一种是由 IE 开发团队提出的事件冒泡流，而另一种是 Netscape 提出的事件捕获流。</p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件冒泡流，即事件开始时由具体的元素接收，然后逐级向上传播，直到 document 对象。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> Click <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面的例子中，点击 <code>p</code> 元素，事件冒泡的顺序是 p &gt; div &gt; body &gt; html &gt; document。</p>
<p><strong>所有的现代浏览器都支持事件冒泡，部分具体实现不同。</strong></p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件捕获流，即与事件冒泡相反，先在上级元素接收，然后逐级向下传播，直到最具体的元素。（有点像是逐级定位，到最后的元素就是事件冒泡流的起点）</p>
<p>和上面同样的例子，点击 <code>p</code> 元素，事件捕获的顺序是 document &gt; html &gt; body &gt; div &gt; p。</p>
<p><strong>由于老版本不支持，因此很少使用事件捕获。尽量使用事件冒泡。</strong></p>
<h3 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h3><p>实际上每一次触发事件都会有一个事件流，事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> Event <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> Cilck <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>即在上面的例子中，事件流包括</p>
<ul>
<li>事件捕获阶段：document &gt; html &gt; body</li>
<li>处于目标阶段：div</li>
<li>事件冒泡阶段：body &gt; html &gt; document</li>
</ul>
<h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>添加事件处理程序的方式有 3 种：使用 HTML 的特性，赋值给事件处理程序属性，使用 addEventListener 函数。</p>
<h3 id="使用-HTML-的特性"><a href="#使用-HTML-的特性" class="headerlink" title="使用 HTML 的特性"></a>使用 HTML 的特性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Click"</span> <span class="attr">onclick</span>=<span class="string">"alert('Clicked')"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样就是在 HTML 中使用 HTML 中与事件处理程序同名的属性来指定。也可以将该属性的值指向页面中其他地方定义的方法。</p>
<p>通常不建议这样做，这样写的缺点是 HTML 与 JavaScript 紧密耦合，修改起来也麻烦。</p>
<h3 id="赋值给事件处理程序属性"><a href="#赋值给事件处理程序属性" class="headerlink" title="赋值给事件处理程序属性"></a>赋值给事件处理程序属性</h3><p>这是 JavaScript 中指定事件处理程序的传统方式，将一个函数赋值给事件处理程序属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Click"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样的效果其实与使用 HTML 特性的例子的作用是相同的，不同的是 JavaScript 指定事件在 js 文件中，这样就与 HTML 解耦了。要删除指定的事件处理程序可以将属性的值设置为 null。</p>
<p>赋值给事件处理程序属性的缺点在与对同一个元素的同一个事件只能添加一个事件处理程序。重复添加相同的事件会覆盖前面所添加的事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked-01"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked-02"</span>);  <span class="comment">// 覆盖了上面设置的 onclick 事件</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="使用-addEventListener-函数"><a href="#使用-addEventListener-函数" class="headerlink" title="使用 addEventListener 函数"></a>使用 addEventListener 函数</h3><p>使用 <code>addEventListener()</code> 的好处是可以添加多个同一事件的处理程序，不会像使用事件处理程序属性一样覆盖。</p>
<p><code>addEventListener()</code> 有对应的删除事件的方法 <code>removeEventListener()</code>，两个方法都接受三个参数。要处理的事件类型（click, blur …），作为事件处理程序的函数，以及表示是否在捕获阶段调用的布尔值。</p>
<h4 id="添加事件处理程序"><a href="#添加事件处理程序" class="headerlink" title="添加事件处理程序"></a>添加事件处理程序</h4><p>给按钮的 click 事件添加事件处理程序：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"click"</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>上面为按钮添加了一个 click 事件处理程序，并且该事件会在冒泡阶段被触发。（第三个参数默认为 false, 上面的例子中可忽略不写）</p>
<p>为同一个元素添加同一个事件的对个事件处理程序函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked-01"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked-02"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里给按钮的 click 事件添加了两个事件处理程序，这两个事件处理程序会按照添加的顺序触发。首先显示 “Clicked-01”，然后显示 “Clicked-02”。</p>
<h4 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h4><p>使用 <code>addEventListener()</code> 添加的事件处理程序，可以通过 <code>removeEventListener()</code> 来移除，但是两个函数的参数必须相同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Cilcked"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</div><div class="line"></div><div class="line">btn.removeEventListener(<span class="string">'click'</span>, handler, <span class="literal">true</span>);  <span class="comment">// 无效</span></div><div class="line"></div><div class="line">btn.removeEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);  <span class="comment">// 有效</span></div></pre></td></tr></table></figure>
<p>大多数情况下，都是讲事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各个浏览器。只在需要在事件到达目标之截获的时候将事件处理程序添加到捕获阶段</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[作用域与闭包]]></title>
      <url>http://www.ahonn.me/2016/04/04/javascript-closures/</url>
      <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在 JavaScript 中变量的作用域与其他语言不同，JavaScript 的作用域不是由 <code>{}</code> 来界定，而是函数。所以循环实际上是在全局作用域中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h3 id="全局变量-amp-局部变量"><a href="#全局变量-amp-局部变量" class="headerlink" title="全局变量 &amp; 局部变量"></a>全局变量 &amp; 局部变量</h3><p>JavaScript 变量的作用域分为两种，全局和局部。</p>
<p>在 JavaScript 中声明全局变量有两种方式，一种是在全局环境下使用 <code>var</code> 声明，另一种是在任何地方直接初始化变量，那么它将会是全局变量。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'ahonn'</span>;   <span class="comment">// 全局变量</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  name = <span class="string">'ahonn'</span>;   <span class="comment">// 还是全局变量</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了在任意地方直接初始化声明全局变量这一特殊之处外，JavaScript 全局变量还可以在函数内部直接读取。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'ahonn'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(); <span class="comment">// 'ahonn'</span></div></pre></td></tr></table></figure></p>
<p>在函数中使用 <code>var</code> 定义的变量为局部变量。因为 JavaScript 的作用域是由函数界定，那么理所当然的函数外部是无法读取函数内部的局部变量。这一点其实其他的编程语言也是这样的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'ahonn'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name) <span class="comment">// Error</span></div></pre></td></tr></table></figure>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链的原理与原型链很类似。在某个环境中为了读取变量时，会沿着作用域链来搜索这个变量，从作用域链的前端开始，向上级搜索。如果在当前局部环境中没有找到该变量，则继续沿作用域链向上搜索，直到最顶层。搜索到该变量时将停止搜索，如果到最后还是没有找到该变量，那么意味着这个变量是未定义的，即它的值为 <code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'a'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="string">'b'</span>;</div><div class="line">  <span class="built_in">console</span>.log(a + b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1() <span class="comment">// 'ab'</span></div></pre></td></tr></table></figure>
<p>在这个例子中，在全局环境中定义了全局变量 a，然后在函数中定义了局部变量 b。函数通过 <code>console.log</code> 输出 a + b。</p>
<p>首先在当前的局部环境中搜索变量 a 的值，没有找到。那么继续向上一级搜索，在全局环境中找到标识符为 a 的变量的值 ‘a’。接着在局部环境中搜索变量 b，得到局部变量 b 的值 ‘b’。最后输入变量 a 和 b 的值拼接后的字符串的值。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>函数外部无法读取函数内部定义的局部变量，所以当我们需要读取局部变量时就需要使用到闭包。</p>
<p>那么闭包是什么呢？我的理解是函数返回一个局部作用域来使得函数外部能够读取函数内部的变量。因为 JavaScript 中作用域的界定是由函数来完成的，所以实际上也就是在函数中再返回一个函数。闭包将函数内外给联系了起来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'ahonn'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f2 = f1();</div><div class="line">f2(); <span class="comment">// 'ahonn'</span></div></pre></td></tr></table></figure>
<p>一般情况下，当函数执行后，函数所在的局部环境将被销毁，也就是说函数在执行后函数中的变量是会被销毁的，在内存中就仅存在全局环境，即全局变量。</p>
<p>但是使用闭包的情况又有所不同，在函数内部定义的匿名函数会包含函数（外部函数，即包含匿名函数的函数）中的变量。在外部函数执行完毕后，原本应该被销毁的局部变量不会被销毁，因为闭包的作用域链仍然在引用这些局部函数，内存的垃圾回收机制不会回收这部分变量所在的内存空间。直到匿名函数被销毁后，这些局部对象才会被销毁。</p>
<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>由于闭包使得函数中的局部变量不会被垃圾回收机制回收，会依然存在于内存中，所以使用闭包的内存消耗很大，所以大量的使用闭包会造成性能问题。另外，在IE中可能会导致内存泄漏。解决方法是在退出函数前将不使用的局部变量全部删除。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> e = <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</div><div class="line">  <span class="keyword">var</span> id = e.id;</div><div class="line"></div><div class="line">  e.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(id);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  e = <span class="literal">null</span>; <span class="comment">// 删除不使用的局部变量值，只将需要的 id 保存为副本</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开始记录]]></title>
      <url>http://www.ahonn.me/2016/04/01/begin/</url>
      <content type="html"><![CDATA[<h2 id="欣喜"><a href="#欣喜" class="headerlink" title="欣喜"></a>欣喜</h2><p>这两天迎来了 Hexo 博客主题 even 真正意义上的第一个用户 <a href="https://www.ileyar.com" target="_blank" rel="external">Leyar</a> ，第一次可以看到博客主题别人用上的效果。</p>
<p><img src="http://7xqvel.com1.z0.glb.clouddn.com/ileyar.png" alt=""></p>
<p>虽然主题还有很多问题存在，但我会慢慢去完善它。期待越来越多的用户~</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>看了这个博客之后，发觉自己的小地方实在是太过冰冷了，毫无生气。所以开始打算在博客上也写写生活，写写想法。</p>
<p>其实刚开始的我很喜欢在网络上表达自己的所有想法，但是后来却渐渐的不想去发，微博，朋友圈，什么都好。即使发过了之后依旧会回去删掉它，只留下了那些赞数很多或者评论很多的。或许这是一种没有安全感的表现吧，我不知道。曾经的微博数量1000+，后来因为某些事情全部删除了。现在每次看到微博都会后悔当初。我没有为自己的过去留下什么文字，图片。</p>
<p>我想要记录生活，博客不止是技术积累，也是生活积累，让三年，五年甚至多年以后的我可以看到过去的某年某天。</p>
<p>So，begin here ..</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[奇怪的原型链]]></title>
      <url>http://www.ahonn.me/2016/03/29/javascript-prototype-chain/</url>
      <content type="html"><![CDATA[<p>在 JavaScript 中一切皆为对象（Object），但是却与 Java，C++ 等语言不同，没有“类”的概念，也没有所谓的“子类”和“父类”。JavaScript 中的对象是基于原型（prototype）来实现面向对象的，靠奇怪的原型链（prototype chain）来实现继承。</p>
<h2 id="对象与原型"><a href="#对象与原型" class="headerlink" title="对象与原型"></a>对象与原型</h2><p>在 JavaScript 中创建对象使用 <code>new</code> 关键字，而后跟着的是构造函数。在 JavaScript 中没有类的概念，所以对象的构造函数就是单纯只是个函数（function）。</p>
<a id="more"></a>
<p>创建自定义构造函数并使用构造函数创建对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function Person() &#123;</div><div class="line">  this.name = &apos;ahonn&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p1 = new Person();</div></pre></td></tr></table></figure></p>
<p>单纯使用构造函数的方式来创建对象，有一个问题，那就是无法共享属性和方法，当两个对象都有一个同名的相同的方法时，方法会在每个实例上重新创建，这无疑是一种浪费。</p>
<p>创建函数时，函数都会有一个原型（prototype）属性，该属性是一个指针，指向一个对象。而这个对象的用途就是包含那些共享的属性和方法。prototype 就是通过调用构造函数而创建的对象实例的原型对象。</p>
<p>使用构造函数模式和原型模式来创建对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Person(name) &#123;</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = function () &#123;</div><div class="line">  console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var p1 = new Person(&quot;ahonn&quot;);</div><div class="line">var p2 = new Person(&quot;person&quot;);</div><div class="line"></div><div class="line">p1.sayName(); // &quot;ahonn&quot;</div><div class="line">p2.sayName(); // &quot;person&quot;</div></pre></td></tr></table></figure></p>
<p>构造函数模式用于定义实例的属性，而原型模式用于定义方法和共享的属性。这里有一点继承的味道，如果把 prototype 当作是父类的话，那么构造函数创建的对象就是原型对象的子类。</p>
<h2 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h2><p>每个构造函数都有一个原型对象（创建函数时会有一个原型属性），原型对象中包含一个指向构造函数的指针（constructor 指向构造函数）,而实例对象中包含一个指向原型对象的内部指针（实例对象中的 [[Prototype]], 它不能被显式的访问）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Animal(name) &#123;</div><div class="line">        this.name = name;</div><div class="line">&#125;</div><div class="line">Animal.prototype.age = 3;</div><div class="line">Animal.prototype.sayName = function() &#123;</div><div class="line">    return this.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var animal = new Animal(&apos;Dog&apos;);</div><div class="line">console.log(animal.sayName());  // &quot;Dog&quot;</div></pre></td></tr></table></figure>
<p>以上代码中，构造函数为 Animal ，Animal.prototype 是指向 Animal 的原型对象的指针，而原型对象中 Animal.prototype.constructor 属性指向构造函数，而 Animal 的实例中 [[Prototype]] 指向构造函数原型对象。</p>
<blockquote>
<p>在ECMA-262中定义此指针为[[Prototype]]，并不能被显式的访问到，而在Firefox,Safari和Chrome中每个对象上有一个<strong>proto</strong>属性。</p>
</blockquote>
<p>那么如果这里面的原型对象是另一个实例对象的话，就可以使得实例与实例之间产生了关联，并且由于原型对象是另一个实例对象的关系，此时这个作为原型对象的实例对象的属性和方法变成了原型对象对应的构造函数创建的实例的“父类”。</p>
<p>这样层层递进，构成实例和原型间的链条，就让实例之间产生了关联，那么就实现了继承。这个就是原型链的基本概念。</p>
<p>实现原型继承的简单示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function Animal() &#123;</div><div class="line">  this.name = &quot;Animal&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.eat = function () &#123;</div><div class="line">  console.log(&quot;Animal can eating&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Dog() &#123;</div><div class="line">  this.name = &quot;Dog&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过原型继承，继承 Animal 的属性和方法，创建了 Dog 与 Animal 之间的原型链</div><div class="line">Dog.prototype = new Animal();</div><div class="line"></div><div class="line">// 修复 Dog 对象的原型对象中的 constructor</div><div class="line">Dog.prototype.constructor = Dog;</div><div class="line"></div><div class="line">var dog = new Dog();</div><div class="line"></div><div class="line">// Dog 中重写了原型中的 name 属性，即所继承的 Animal 中的 name 属性</div><div class="line">console.log(dog.name); // &quot;Dog&quot;;</div><div class="line"></div><div class="line">// 同时继承了原型中的方法</div><div class="line">dog.eat(); // &quot;Animal can eating&quot;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apply, call 与 bind 的区别]]></title>
      <url>http://www.ahonn.me/2016/03/20/javascript-apply-call-and-bind/</url>
      <content type="html"><![CDATA[<p>最近在看 《JavaScript 高级程序设计》，也就是所谓的高程3。正好看到 <code>Function</code> 部分，看到了几个熟悉的字眼，<code>apply()</code>，<code>call()</code> 和 <code>bind()</code>。好像是有些面试题里面有，遂搞清楚了记录下。</p>
<h2 id="apply-与-call"><a href="#apply-与-call" class="headerlink" title="apply() 与 call()"></a>apply() 与 call()</h2><p>每个函数都包含两个非继承的方法：<code>apply()</code> 和 <code>call()</code>。两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 <code>this</code> 对象的值。这是书中的说法，大概意思就是 <code>apply()</code> 和 <code>call()</code> 这两个方法是用来改变函数中 <code>this</code> 的指向的。而 <code>apply()</code> 与 <code>call()</code> 的区别就在与接收参数的方式。</p>
<p><code>apply()</code> 方法接收两个参数，一个是在其中运行函数的作用域，函数中的 <code>this</code> 的值，另一个是参数数组。<br>而 <code>call()</code> 方法的第一个参数跟 <code>apply()</code> 相同，不同的是除了第一个参数，后面的其他参数将会直接传递给函数。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function sum(num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用 apply()</div><div class="line">function applySum(num1, num2) &#123;</div><div class="line">  return sum.apply(this, arguments);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用 call()</div><div class="line">function callSum(num1, num2) &#123;</div><div class="line">  return sum.call(this, num1, num2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(applySum(1, 2)); // 3</div><div class="line">alert(callSum(1, 2)); // 3</div></pre></td></tr></table></figure>
<p>这里使用 <code>apply()</code> 与 <code>call()</code> 的效果都是一样的，不同的只是除了 <code>this</code> 的指向之外的参数的传递形式不同。在不给函数传递参数的时候则完全一样，当不知道需要传递的函数参数的个数时，使用 <code>apply()</code> 更好。</p>
<p>实际上 <code>apply()</code> 与 <code>call()</code> 的用法并不只是这些。他们可以扩充函数赖以运行的作用域，即可以改变函数运行时的上下文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">name = &quot;unknown&quot;;</div><div class="line">var person = &#123;</div><div class="line">  name = &quot;ahonn&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sayName() &#123;</div><div class="line">  console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayName() // unknown</div><div class="line">// 函数中的 this 为全局环境</div><div class="line">sayName.apply(this); // unknown</div><div class="line">// 函数中的 this 指向了 person</div><div class="line">sayName.apply(person) // ahonn</div></pre></td></tr></table></figure>
<p>上面的例子中的 <code>apply()</code> 换成 <code>call()</code> 的话效果相同，因为我这样只给 <code>apply()</code> 传了第一个参数。</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p><code>bind()</code> 方法与 <code>apply()</code> 和 <code>call()</code> 相似，同样是可以改变函数内 this 的指向。但与 <code>apply()</code>, <code>call()</code> 不同的是，<code>bind()</code> 方法会创建一个新函数，称为绑定函数，当调用绑定函数时，函数会以创建时的第一个参数 this 作为函数运行的作用域。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">name = &quot;unknown&quot;;</div><div class="line">var person = &#123;</div><div class="line">  name = &quot;ahonn&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sayName() &#123;</div><div class="line">  console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var sayAhonnName = sayName.bind(person);</div><div class="line"></div><div class="line">// 函数中的 this 指向 person</div><div class="line">sayAhonnName() // ahonn</div></pre></td></tr></table></figure>
<p>也就是说，<code>bind()</code> 方法可以绑定一个上下文到函数中，产生一个新的绑定函数。这样就可以在需要的时候去运行有指定 this 对象的函数。</p>
<p>使用变量保存 this 的做法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var foo = &#123;</div><div class="line">  bar: 1,</div><div class="line">  eventBind: function() &#123;</div><div class="line">    var _this = this;</div><div class="line">    $(&apos;.someClass&apos;).on(&apos;click&apos;, function(event) &#123;</div><div class="line">      console.log(_this.bar);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为在 JavaScript 中函数也是对象，使用如果不使用 <code>_this</code> 来保存上下文环境的话，在绑定的事件函数中将找不到 <code>bar</code> 这个值，因为上下文环境发生了改变。更优雅的做法就是使用 <code>bind()</code> 来完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var foo = &#123;</div><div class="line">    bar : 1,</div><div class="line">    eventBind: function()&#123;</div><div class="line">        $(&apos;.someClass&apos;).on(&apos;click&apos;,function(event) &#123;</div><div class="line">            console.log(this.bar);</div><div class="line">        &#125;.bind(this));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就把 <code>$(&#39;.someClass&#39;).on(&#39;click&#39;,function(event) {}</code> 外的上下文环境给绑定到了函数内了。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jade 模板引擎]]></title>
      <url>http://www.ahonn.me/2016/02/29/jade-template-engine/</url>
      <content type="html"><![CDATA[<p>最近在改一个 Hexo 的主题 <a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">apollo</a>。然后看到这个主题用的是叫做 Jade 的模版引擎写的。之前了解过几个模版引擎 ejs，swig 什么的，但是这些都是在原有的 HTML 中插标签，看起来有点乱。看到 Jade 后就深深的被它那如同 Python 的缩进语法深深吸引了，遂上网学习一发。  </p>
<p>Jade 是 JavaScript 实现的，供 Node 使用，原生支持 Express。但也有 PHP，Python 等其他语言的实现。（要是 HTML 模版用 Jade，CSS 用 Styl，后端用 Python，那岂不是很好玩~全是缩进缩进缩进=。=）</p>
<h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><p>添加文档类型可以通过 <code>!!!</code>  或者 <code>doctype</code> 来添加。</p>
<a id="more"></a>
<h3 id="标签、属性"><a href="#标签、属性" class="headerlink" title="标签、属性"></a>标签、属性</h3><p> Jade 写起来就跟在 Sublime Text 中用 Emmet 写 HTML 一样。标签直接写，Class 用 <code>.</code>，ID 用 <code>#</code>。不同的是，层级关系 Jade 使用缩进表示，类似于 Python，而 Emmet 插件的写法是只有一行的。结果写出来就是这个样子滴：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">	head.class</div><div class="line">    	title</div><div class="line">    body#id</div></pre></td></tr></table></figure>
<p>渲染出来的结果:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看起来超级简洁，而且都不需要去写闭合标签。不过比较需要注意缩进，坏处就是如果复制代码过来的话可能需要重新人脑格式化一下。</p>
<p>那么问题来了，其他属性怎么办？不是 Class 和 id 的话，就可以在 标签后面加个括号，写在括号里面。当属性值 <code>undefined</code> 或者 <code>null</code> 时，该属性将不会编译。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a(href=&quot;http://www.ahonn.me&quot;, class=null)</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.ahonn.me&gt;&lt;/a&gt;</span></span></div></pre></td></tr></table></figure>
<p>这样就解决了其他属性的问题了~</p>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>那么标签里的文本怎么写呢，so easy~ 只要跟在标签的后面就行了。Like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a(href=&quot;http://www.ahonn.me&quot;) Ahonn</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.ahonn.me&gt;Ahonn&lt;/a&gt;</span></span></div></pre></td></tr></table></figure>
<p>大段文本的话可以使用<code>|</code> 或者<code>.</code>：</p>
<p>使用 <code>|</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p</div><div class="line">  | one</div><div class="line">  | two</div><div class="line">  | there</div></pre></td></tr></table></figure>
<p>使用<code>.</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p.</div><div class="line">  one</div><div class="line">  two</div><div class="line">  there</div></pre></td></tr></table></figure>
<p>上面两种写法渲染后是不一样的，使用 <code>|</code> 的写法渲染后不会换行，而使用 <code>.</code> 会根据格式原样输出。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用 | --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>one two there<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用 . --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>one</div><div class="line">two</div><div class="line">there</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在使用 <code>script</code>、<code>style</code>、<code>textarea</code> 等只包含文本标签时，可以不加前缀 <code>|</code>，</p>
<p>当需要在模版中写 JavaScript 时，推荐使用 <code>.</code>。</p>
<p>既然是 HTML 模版，那么一定是可以结合数据的。这时候，我们可以用 <code>#{}</code> 将变量包起来。这样的话 <code>#{}</code>  中的值将会被转义成对应的数据。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- var name = &quot;ahonn&quot;</div><div class="line">p.</div><div class="line"> My name is #&#123;name&#125;</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My name is ahonn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>jade 支持 HTML 的注释，即在 html 代码中能看到的注释，还有一种是 Jade 的注释，不会被渲染。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// HTML 注释</div><div class="line">p foo</div><div class="line">//- Jade 注释，这个注释只有在 .jade 文件中显示</div><div class="line">p bar</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML 注释 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在 Jade 中可以定义变量，写条件语句或者循环什么的，这时候就需要使用到 <code>-</code> 前缀，这不会被输出。 <code>-</code> 支持 JavaScript 的语法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- var foo = &apos;bar&apos;;</div><div class="line">- if (foo === &apos;bar&apos;)</div><div class="line">- for (var key in obj)</div><div class="line">  p= obj[key]</div></pre></td></tr></table></figure>
<p>上面写的条件和循环语句是 JavaScript 中的写法，同时 Jade 也有自己的条件和循环语句。</p>
<p><strong>循环</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- var items = [&quot;one&quot;, &quot;two&quot;, &quot;there&quot;]</div><div class="line">each item, i in items</div><div class="line">  li #&#123;item&#125;: #&#123;i&#125;</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>one: 0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>two: 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>three: 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>条件</strong>：</p>
<p>条件语句类似 Python，不需要加 <code>()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for user in users</div><div class="line">  if user.role == &apos;admin&apos;</div><div class="line">    p #&#123;user.name&#125; is an admin</div><div class="line">  else</div><div class="line">    p= user.name</div></pre></td></tr></table></figure>
<p>Jade 支持转义和非转义输出，使用 <code>=</code> 时将会转义，而 <code>!=</code> 将会原样输出。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- var  ahonn = &apos;nnoha&apos;</div><div class="line">p= ahonn</div><div class="line">p!= ahonn</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>nnoha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ahonn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="继承、包含"><a href="#继承、包含" class="headerlink" title="继承、包含"></a>继承、包含</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>Jade 支持通过 <code>block</code> 和 <code>extends</code> 关键字老实现模版继承，<code>block</code> 部分将在子模块实现。</p>
<p>举个栗子🌰：</p>
<p>layout.jade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!!!</div><div class="line">html</div><div class="line">  head</div><div class="line">  	block title</div><div class="line">  body</div><div class="line">  	block content</div></pre></td></tr></table></figure>
<p>index.jade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">extends layout</div><div class="line"></div><div class="line">block title</div><div class="line">  title= ahonn</div><div class="line"></div><div class="line">block content</div><div class="line">  p.</div><div class="line">    My name is ahonn.</div><div class="line">    This is index.jade</div></pre></td></tr></table></figure>
<p>index.jade 继承 layout.jade，layout 中的 block 部分将在子模版 index 中实现。</p>
<p>index.jade 渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">DOCTYPE</span> <span class="attr">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ahonn<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>My name is ahonn.</div><div class="line">    This is index.jade</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><p>Jade 可以使用 <code>include</code> 静态包含其他文件</p>
<p>head.jade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head</div><div class="line">  title!= ahonn</div></pre></td></tr></table></figure>
<p>body.jade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  p.</div><div class="line">    My name is ahonn.</div><div class="line">    This is index.jade</div></pre></td></tr></table></figure>
<p>index.jade</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html</div><div class="line">  include head</div><div class="line">  include body</div></pre></td></tr></table></figure>
<p>渲染结果将于上面继承的相同。</p>
<h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>Mixins 相当于 JavaScript 中的函数，实际上 Mixins 在编译过程中就是被转换为 JavaScript 函数的。</p>
<p>不带参数的 🌰：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mixin list</div><div class="line">  ul</div><div class="line">	li foo</div><div class="line">    li bar</div><div class="line"></div><div class="line">h2!= Ahonn</div><div class="line">+list()</div></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ahonn<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>带参数的 🌰：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mixin list(items)</div><div class="line">  ul</div><div class="line">    - each item in items</div><div class="line">      li= item</div><div class="line"></div><div class="line">- var items = [&quot;foo&quot;, &quot;bar&quot;]</div><div class="line">h2!= Ahonn</div><div class="line">+list(items)</div></pre></td></tr></table></figure>
<p>渲染结果与上面无参数的 Mixins 相同。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 Jade 写模版非常的简洁，各种 <code>include</code> 和 <code>extends</code> 使用起来也非常方便，可以模块化的去写各个组件。优点显而易见，对于我这种写 Python 的来说简直是大爱。不过可能这种写法相对于其他模版引擎来说差别较大，跟 HTML 代码的差别也挺大，所以相对来说也是比较少人去用了。而且用这个写的话，写的人来维护的倒是挺方便简洁，但是如果是其他人来维护的话还是比较难上手的，有点增加维护成本的感觉。不过我个人倒是挺喜欢的。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Jade </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 多线程初步了解]]></title>
      <url>http://www.ahonn.me/2016/02/20/python-multithreaded-preliminary/</url>
      <content type="html"><![CDATA[<p>这两天在写 <a href="https://www.github.com/ahonn/Nada" target="_blank" rel="external">Nada</a> 的下载功能，遇到一个问题，在下载歌曲的时候整个界面都会卡住，必须等待下载完成才能够恢复，因为写的时候是直接顺序执行的，没有多线程。之前在写播放功能的时候是参考了别人的代码，自己其实对多线程部分不是很了解。然后趁着晚上了解一下 Python 的 thread 和 treading 模块。</p>
<h2 id="Python-多线程支持"><a href="#Python-多线程支持" class="headerlink" title="Python 多线程支持"></a>Python 多线程支持</h2><p>Pyhton 标准库提供了 thread 和 threading 模块来支持多线程，这意味着不需要重新下载这两个模块，只需要在代码中 import 这两个模块就可以了。</p>
<h2 id="thread-模块"><a href="#thread-模块" class="headerlink" title="thread 模块"></a>thread 模块</h2><p>thread 模块是以低级、原始的方式来处理和控制线程，提供了一个简单的锁（相对于 threading 模块的锁的感觉来说的确是比较简单）。相对于 threading 模块来说，thread 模块更加灵活。</p>
<a id="more"></a>
<ul>
<li><p><code>thread.start_new_thread(function, args [, kwargs])</code><br>创建一个新的线程，返回该线程的标识符。线程执行后将制动退出，即函数执行完毕。当遇到未处理的异常时也将退出，但不影响其他线程。</p>
<ul>
<li><code>function</code>：线程执行的函数。</li>
<li><code>args</code>：线程执行函数的参数。</li>
<li><code>kwargs</code>：为函数提供命名参数字典。</li>
</ul>
</li>
<li><p><code>thread.exit()</code><br>结束当前进程，触发 SystemExit 异常。</p>
</li>
<li><p><code>thread.get_ident()</code><br>返回当前线程的标识符，标识符为一个非零整数。</p>
</li>
<li><p><code>thread.interrupt_main()</code><br>触发主线程的 KeyboardInterrupt 异常，子线程使用此方法来终端主线程。</p>
</li>
<li><p><code>thread.allocate_lock()</code><br>创建 thread.LockType 锁类型，即为线程锁</p>
</li>
</ul>
<h3 id="thread-LockType"><a href="#thread-LockType" class="headerlink" title="thread.LockType"></a>thread.LockType</h3><ul>
<li><p><code>Lock.acquire([ waitflag ])</code><br>获取锁，返回一个布尔值，成功返回 True，否则返回 False。</p>
<p><code>waitflag</code>：默认值为非零整数，表示如果锁已经被其他线程占用，那么当前线程等待，直到其他线程释放锁，即为同步阻塞。如果将参数设置为 0，即表示当前线程会尝试获取锁，不管锁是否被占用，线程都不会等待。</p>
</li>
<li><p><code>Lock.release()</code><br>释放所占用的锁。</p>
</li>
<li><p><code>Lock.locked()</code><br>判断锁是否被占用。</p>
</li>
</ul>
<h2 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h2><p>threading 模块是对 thread 模块的二次封装，提供更方便的 API 使用。大多数多线程使用 threading 模块编写。提供更复杂的锁（Lock &amp; RLock），条件，事件等。</p>
<ul>
<li><p><code>threading.Thread(group=None, target=None,name=None, args=(), kwargs={})</code><br>返回一个Thread对象，每个Thread对象代表着一个线程，可以通过start()方法，开始运行。</p>
<ul>
<li><code>group</code>：应该为 None ，该参数是留给未来的扩展时使用的</li>
<li><code>target</code>：可调用对象（函数），在线程启动后执行</li>
<li><code>name</code>：线程的名字，默认值为“Thread-N”，N 是一个十进制整数</li>
<li><code>args</code>：target 调用对象的参数列表</li>
<li><code>kwargs</code>：target 调用对象的关键字参数</li>
</ul>
</li>
<li><p><code>threading.activeCount()</code><br>返回当前存活线程数</p>
</li>
<li><p><code>threading.currentThread()</code><br>返回当前 Thread 对象</p>
</li>
<li><p><code>threading.enumerate()</code><br>返回当前存活的 Thread 对象列表</p>
</li>
<li><p><code>threading.Lock()</code><br>返回一个原始锁对象</p>
</li>
</ul>
<h3 id="threading-Thread"><a href="#threading-Thread" class="headerlink" title="threading.Thread"></a>threading.Thread</h3><p>有两种方式来创建 threading.Thread 对象。一种方式是继承 Thread 类，重写父类的 run 方法，另一种方式是通过 threading.Thread() 函数创建。</p>
<ul>
<li><p><code>Thread.start()</code><br>启动线程</p>
</li>
<li><p><code>Thread.join([timeout])</code><br>阻塞当前环境进程，直到调用此方法的线程终止，或者达到指定的 timeout</p>
</li>
<li><p><code>Thread.getName()</code> &amp; <code>Thread.setName()</code><br>获取线程名称 &amp; 设置线程名称</p>
</li>
<li><p><code>Thread.isAlive()</code><br>返回线程是否存活。返回 True 在线程开始运行直到终止。</p>
</li>
</ul>
<h3 id="threading-Lock"><a href="#threading-Lock" class="headerlink" title="threading.Lock"></a>threading.Lock</h3><ul>
<li><p><code>Lock.acquire([blocking])</code><br>获取锁。<code>blocking</code> 默认为 true，阻塞直到锁被释放。当 <code>blocking</code> 为 False 时，则不阻塞。</p>
</li>
<li><p><code>Lock.release()</code><br>释放锁，没有返回值。当没有锁时，将会抛出 ThreadError 异常。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python curses 模块]]></title>
      <url>http://www.ahonn.me/2016/01/23/python-curses-module/</url>
      <content type="html"><![CDATA[<p>Python 中的 curses 模块封装了 C 语言的 curses。curses 是一个能够提供基于文本终端窗口功能的动态库。它可以创建和管理一个窗口，使用8中不同的颜色，提供鼠标以及键盘支持。与 Tkinter 不同的是 curses 是基于终端的。</p>
<p><strong>curses 支持 Unix/Linux 系统，目前不支持 Windows</strong><br><a id="more"></a></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li><code>initscr()</code><br>  初始化 curses, 在任何代码执行钱都需要先初始化 curses。</li>
<li><code>noecho()</code><br>  关闭屏幕回显，即读取字符仅在适当的环境下输出。相对应的是 <code>echo()</code>。</li>
<li><code>cbreak()</code><br>  程序立即反应，即不需要按回车。相对应的是 <code>nocbreak()</code>。</li>
<li><code>keypad(bool)</code><br>  键盘模式，即读取键盘输出。<code>keypad(1)</code> 为开启，<code>keypad(0)</code> 为关闭。</li>
<li><code>endwin()</code><br>  恢复默认设置，即回到终端之前的状态。</li>
<li><code>newwin(height, width, begin_y, begin_x)</code><br>  在原有程序中创建新窗口，类似与分屏。</li>
<li><p><code>addscr(y, x, str, attr)</code><br>  显示文本，若没有坐标，字符将显示在上一次操作完的位置；若没有属性，字符将使用默认的属性显示。</p>
<p>  <strong>属性：</strong>可使用 <code>color_pair(int)</code> 方法获取一对颜色。使用 <code>init_pair(n, f, b)</code> 修改颜色对 n，使用 f 为前景色，使用 b 为背景色。</p>
<p>  curses 内置了8种基本颜色：<code>COLOR_RED</code>, <code>COLOR_BLACK</code>, <code>COLOR_GREEN</code>, <code>COLOR_YELLOW</code>, <code>COLOR_BULE</code>, <code>COLOR_MAGENTA</code>, <code>COLOR_CYAN</code>, <code>COLOR_WHITE</code>。使用颜色前需要调用 <code>start_color()</code>。</p>
</li>
<li>getch()<br>  获取输入一个字符串，返回一个 0~255 之间的整数，表示字符的 ASCII 值。</li>
<li>refresh()<br>  刷新窗口，变更窗口后需要调用</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> curses</div><div class="line"></div><div class="line"><span class="comment"># 初始化 curses</span></div><div class="line">screen = curses.initscr()</div><div class="line"><span class="comment"># 开启键盘模式</span></div><div class="line">screen.keypad(<span class="number">1</span>)</div><div class="line"><span class="comment"># 关闭屏幕回显</span></div><div class="line">curses.noecho()</div><div class="line"></div><div class="line"><span class="comment"># 开启颜色设置，并设置颜色对</span></div><div class="line">curses.start_color()</div><div class="line">curses.init_pair(<span class="number">1</span>, curses.COLOR_CYAN, curses.COLOR_RED)</div><div class="line">curses.init_pair(<span class="number">2</span>, curses.COLOR_BLUE, curses.COLOR_WHITE)</div><div class="line"></div><div class="line"><span class="comment"># 显示文本</span></div><div class="line">screen.addstr(<span class="number">12</span>, <span class="number">25</span>, <span class="string">"Hello, Ahonn!"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	<span class="comment"># 读取键盘输入</span></div><div class="line">	key = screen.getch()</div><div class="line"></div><div class="line">	<span class="comment"># 当输入 c 时，显示 you input 'c', 使用颜色对 1</span></div><div class="line">	<span class="keyword">if</span> key == ord(<span class="string">'c'</span>):</div><div class="line">		screen.addstr(<span class="number">12</span>, <span class="number">25</span>, <span class="string">"you input 'c' "</span>, curses.color_pair(<span class="number">1</span>))</div><div class="line">	<span class="comment"># 当输入 b 时，显示 you input 'b'，使用颜色对 2</span></div><div class="line">	<span class="keyword">elif</span> key == ord(<span class="string">'b'</span>):</div><div class="line">		screen.addstr(<span class="number">12</span>, <span class="number">25</span>, <span class="string">"you input 'b' "</span>, curses.color_pair(<span class="number">2</span>))</div><div class="line">	<span class="comment"># 当输入 q 时退出循环</span></div><div class="line">	<span class="keyword">elif</span> key == ord(<span class="string">'q'</span>):</div><div class="line">		<span class="keyword">break</span></div><div class="line"><span class="comment"># 刷新窗口</span></div><div class="line">screen.refresh()</div><div class="line"><span class="comment"># 退出到终端之前的状态</span></div><div class="line">curses.endwin()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015 总结]]></title>
      <url>http://www.ahonn.me/2015/12/31/2015-summary/</url>
      <content type="html"><![CDATA[<blockquote>
<p>记录 2015，计划 2016</p>
</blockquote>
<h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>对2015 年的春节并没什么印象，现在也想不起来那时候在做什么了。大概是在游戏中度日吧，回想那段日子，现在还真是觉得那时候在浪费时间呢。</p>
<p>接着呢就是大一的第二个学期的到来。数据结构，对这门课还挺感兴趣呢，学起来也觉得还 ok。大概在 3 月，被老师推荐去了学校刚刚开始搞得 ACM 集训队。开始重新看起了 C，但是依旧还是会沉浸在游戏中。</p>
<p>就这样在做题，训练与游戏中到了五一。回家之后不知道是那根筋不对，开始对 Linux 感兴趣了，把电脑上的游戏删了，把系统换成了 Ubuntu。假期期间换了无数 Linux 发行版，也开始慢慢了解开源。于是，我开始玩起了 Ubuntu。假期结束接着的是 ACM 的各种比赛，去了广州的各大高校，参加了在中大举办的广东省程序设计比赛，打了打酱油。看到了很多虽然同是大一的大牛，差距是那么的大。</p>
<p>就这样我又默默的水过了一个学期，唯一值得纪念的就是去了中大打了酱油吧。</p>
<p>大二。刚开始对课程里的人机交互还是充满期待的，但是后面我发现我错了，这只是一门网页设计与推广某个所谓创业平台的课。所以说，像这样的大学，虽然也不乏良师，但大部分还是靠的自学。</p>
<a id="more"></a>
<p>被所谓的创新创业潮影响，学校里也开始浮躁起来了，各种创业。在我的眼里，那些所谓的创业不过是有一个想法，然后把想法变成嘴皮子与 PPT，再去参加一些什么创业比赛拿拿奖。相对这些我还是更喜欢那些线下交流会，或者之前看到的 SF 的编程马拉松这种。或许我本身的性格也就比较不适合这些吧。</p>
<p>很快，学校又迎来了一大批像一年的我一样迷茫的大一新生。接着便是纳新宣传，面试，培训，竞选。在这期间跟着一群很不错的小伙伴一起做事，虽然有时会出现一些矛盾，但是那一段时间过得也是蛮开心的。面试师弟师妹的时候，回想起一年前的我，虽然我已经忘记了当时面试的情景了，但是依然感触很深。第一次培训师弟师妹的时候非常紧张，那个时候是讲 HTML ，怕我自己讲的不好一直会问他们听得懂吗，ok吗。讲完的时候会有好险已经讲完了的感觉，不过后来慢慢变好了，到最后都可以在讲台上跟下面的人吹牛逼了。这对我来说，应该是一个很大的改变。</p>
<p>换届大会之后，我成了负责人。然而有些小伙伴却因为某些原因，离开了。换届之后留下了一个烂摊子收拾，忙着申请培训的课室，忙着搞 12 月的周年庆晚会。开始有点慌了手脚，但是有时候不逼逼自己真的不知道自己是可以做到的。还好，晚会圆满成功。当我最后在台上讲话的时候，我的眼睛里全是射灯的光，什么都看不到，但是心情却是说不出的激动。这应该是人生中第一次由我负责的晚会表演。师弟师妹们很给力，也很努力，我很开心。</p>
<p>就这样我大二的一半就要结束了，大学也将近一半。</p>
<p>以上，2015。</p>
<p>2016<br>我期望我能够收获更多<br>对于即将到来的变化，拥抱变化<br>勿忘初心，记住自己想要的是什么<br>好好做人生的选择题，即使做错了也欣然接受</p>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p><strong>2015 List</strong></p>
<ul>
<li>重新捡起曾经学过的 C ，扩展的了解了C ++，为了在 ACM 的比赛中不会太被动</li>
<li>装了 Linux 单系统，学会了常用的命令行操作</li>
<li>暑假的时候学了 Python ，学会了些爬虫</li>
<li>小学期，把 PHP 又好好的复习了一下，学了 Codeigniter</li>
<li>重新学了一次 JavaScript 及 jQuery，了解了一点 AngularJS</li>
<li>看着网上的一个由 Java 写的验证码识别写了 PHP 的，虽然没有很好的完成</li>
<li>微信群里听说了 Face++，然后爬了下教务网的照片，做了一个简陋的人脸识别，识别率堪忧</li>
<li>写了一个知乎网页解析，放在了 Github 上</li>
<li>在 2015 的倒数第二天，在 Github 上参加了一个编程马拉松 <a href="https://github.com/geekan/coding_marathon/issues/12" target="_blank" rel="external">coding_marathon</a></li>
</ul>
<p><strong>2016 To Do List</strong></p>
<ul>
<li>完成 Github 上的那个编程马拉松，并且有质量的 commit（没有完成，但在过程中学到很多东西）</li>
<li><del>读完 《JavaScript 高级程序设计》</del>（马马虎虎的看了一遍）</li>
<li><del>完成百度前端技术学院的春季班</del>（算是完成了一半吧）</li>
<li><del>学习 React, React Native 等</del>（基本上熟悉 React，React Native 部分没怎么看）</li>
<li>more…</li>
</ul>
<p><strong>——————–End——————–</strong></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 PHP 中如何预防 SQL 注入]]></title>
      <url>http://www.ahonn.me/2015/12/21/how-can-i-prevent-sql-injection-in-php/</url>
      <content type="html"><![CDATA[<blockquote>
<p>翻译自 Stack Overflow: <a href="http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php" target="_blank" rel="external">How can I prevent SQL-injection in PHP?</a> 中的高票答案</p>
</blockquote>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>如果用户输入的数据没有经过修正，那么应用将会很容易受到 SQL 注入攻击，像下面的这个例子一样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$unsafe_variable = $_POST[<span class="string">'user_input'</span>]; </div><div class="line"></div><div class="line">mysql_query(<span class="string">"INSERT INTO `table` (`column`) VALUES ('$unsafe_variable')"</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>上面的例子，会因为用户输入像 <code>value&#39;); DROP TABLE table;--</code> 这样的数据，使得 SQL 语句变成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `table` (`column`) VALUES(&apos;value&apos;); DROP TABLE table;--&apos;)</div></pre></td></tr></table></figure></p>
<p>应该如何去预防这样的事情发生？</p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><strong>使用预处理语句以及参数化查询来预防 SQL 注入</strong></p>
<p>在发送到数据库前，对每一个参数进行解析。这种处理方式是不可能受到攻击者恶意 SQL 注入的。</p>
<p>有两种基本操作可以选择，来达到这个目的：</p>
<ul>
<li><p>使用 PDO(PHP Data Objects)：支持所有的主流数据库</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$stmt = $pdo-&gt;prepare(<span class="string">'SELECT * FROM employees WHERE name = :name'</span>);</div><div class="line"></div><div class="line">$stmt-&gt;execute(<span class="keyword">array</span>(<span class="string">'name'</span> =&gt; $name));</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($stmt <span class="keyword">as</span> $row) &#123;</div><div class="line">    <span class="comment">// do something with $row</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 MySQLi：支持 MySQL 数据库</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$stmt = $dbConnection-&gt;prepare(<span class="string">'SELECT * FROM employees WHERE name = ?'</span>);</div><div class="line">$stmt-&gt;bind_param(<span class="string">'s'</span>, $name);</div><div class="line"></div><div class="line">$stmt-&gt;execute();</div><div class="line"></div><div class="line">$result = $stmt-&gt;get_result();</div><div class="line"><span class="keyword">while</span> ($row = $result-&gt;fetch_assoc()) &#123;</div><div class="line">    <span class="comment">// do something with $row</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果连接到 MySQL 之外的数据库，有其他的驱动可以选择，例如 <code>PostgreSQL</code> 可以使用 <code>pg_prepare()</code> 和 <code>pg_execute()</code>。PDO 是一个比较普遍的选择，因为它可以兼容更多的数据库。</p>
<p><strong>正确的建立连接</strong><br>注意，当使用PDO访问MySQL数据库时，默认不使用预处理语句。要解决这个问题，需要禁用预处理语句的模拟 <code>ATTR_EMULATE_PREPARES</code> 。</p>
<blockquote>
<p><strong>PDO::ATTR_EMULATE_PREPARES:</strong><br>启用或禁用预处理语句的模拟。 有些驱动不支持或有限度地支持本地预处理。使用此设置强制PDO总是模拟预处理语句（如果为 TRUE ），或试着使用本地预处理语句（如果为 FALSE）。如果驱动不能成功预处理当前查询，它将总是回到模拟预处理语句上。 需要 bool 类型。</p>
</blockquote>
<p>一个正确建立 PDO 连接的例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$dbConnection = <span class="keyword">new</span> PDO(<span class="string">'mysql:dbname=dbtest;host=127.0.0.1;charset=utf8'</span>, <span class="string">'user'</span>, <span class="string">'pass'</span>);</div><div class="line"></div><div class="line">$dbConnection-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, <span class="keyword">false</span>);</div><div class="line">$dbConnection-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div></pre></td></tr></table></figure></p>
<p>在上面的例子中错误模式并不是必要的，但建议添加它。这样脚本就不会因为一个致命错误而报错停止，让开发人员有机会去捕捉抛出的异常并进行处理。</p>
<p>第一个 <code>setAttribute()</code> 是告诉 PDO 禁用预处理语句的模拟，使用真正准备好的预处理语句。这确保语句与值不会在 PHP 解析之前就发送到 MySQL。尽管你可以在选项中设置字符集的构造函数，但是要注意，PHP版本 &lt; 5.3.6，默认无视 DSN 的字符参数。</p>
<p><strong>额外说明</strong><br>SQL 语句会通过预处理解析以及数据库的编译。通过指定参数(例如 ? 或者 :name 之类的参数)，告诉数据库引擎那些是你想要过滤的。当执行语句时，预处理过的语句将会结合参数去执行。</p>
<p>最重要的是，参数值结合编译的语句之后，它不是一个 SQL 字符串。SQL 注入是通过恶意字符串创建 SQL 发送到数据库的一种攻击。所以分开发送实际的 SQL 参数，可以降低被注入的风险，避免造成一些不希望看到的结果。任何发送的参数，将会在使用预处理之后被当做是字符串。</p>
<p>在上面的例子中，如果变量 <code>$name</code> 的值是 <code>&#39;Sarah&#39;; DELETE FROM employees</code>，那么结果将会是查找字符串 <code>&quot;&#39;Sarah&#39;; DELETE FROM employees&quot;</code>，而且也将不会得到一个空表。（即是后面的 <code>DELETE FROM employees</code> 将被当成字符串，而不是当做 SQL 语句去执行）</p>
<blockquote>
<p>使用预处理语句的另一个好处是，如果你在同一个会话中多次执行相同的语句，语句只会被解析和编译一次，在速度上也有一点提升。</p>
</blockquote>
<p>下面是一个使用 PDO 来插入数据的例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$preparedStatement = $db-&gt;prepare(<span class="string">'INSERT INTO table (column) VALUES (:column)'</span>);</div><div class="line"></div><div class="line">$preparedStatement-&gt;execute(<span class="keyword">array</span>(<span class="string">'column'</span> =&gt; $unsafeValue));</div></pre></td></tr></table></figure></p>
<p><strong>动态查询</strong><br>动态查询依旧可以使用预处理语句去进行，对用某些不能参数化的数据，可以使用白名单来限制可能的值。例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Value whitelist</span></div><div class="line">  <span class="comment">// $dir can only be 'DESC' or 'ASC'</span></div><div class="line">$dir = !<span class="keyword">empty</span>($direction) ? <span class="string">'DESC'</span> : <span class="string">'ASC'</span>;</div></pre></td></tr></table></figure></p>
<p>总之，对于用户输入的所有数据都应该在发送到数据库查询之前进行预处理，以此来过滤那些不安全的参数。使得不会因为被 SQL 注入攻击而产生意想不到的结果。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP cURL 库的简单使用]]></title>
      <url>http://www.ahonn.me/2015/12/19/simple-use-of-the-php-curl-library/</url>
      <content type="html"><![CDATA[<blockquote>
<p>之前写 PHP 的爬虫的时候就有用到 cURl 扩展，然后前几天在写 <code>zhihu-php</code> 的时候也用到了这个，也觉得这个也是用得比较多的一个东西，所以就上网又学习了一下，就顺手把它写下来了。</p>
</blockquote>
<p>cURL 是一个功能强大的库，支持很多不同的协议、选项，能提供 URL 请求相关的各种细节信息。常用于网页、数据采集。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以通过 <code>phpinfo()</code> 来输出 PHP 的配置信息，搜索查看是否开启了 cURL 库。</p>
<p><strong>windows</strong></p>
<ul>
<li>将 PHP 安装文件夹下的 <code>php_curl.dll</code>，<code>libeay32.dll</code>，<code>ssleay.dll</code> 复制到 <code>system32</code> 文件夹下。</li>
<li>将 PHP.ini 中的 <code>extension=php_curl.dll</code> 前的 <code>;</code> 分号去掉。</li>
<li>重启服务器。<a id="more"></a>
</li>
</ul>
<p><strong>linux</strong><br>Ubuntu 上通过 <code>apt-get</code> 安装的 PHP 默认已经启用。若无，具体安装过程Google。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>通过 <code>curl_init()</code> 初始化一个 cURL 对象，然后通过 <code>curl_setopt()</code> 设置传输的选项，使用 <code>curl_exec()</code> 执行该 cURL 会话，最后通过 <code>curl_close()</code> 关闭这个会话</p>
<p><strong>简单的抓取网页</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$url = <span class="string">'http://www.ahonn.me'</span>;</div><div class="line"><span class="comment">// 初始化一个 cURL 会话</span></div><div class="line">$ch  = curl_init($url);</div><div class="line"><span class="comment">// 设置传输选项，这里设置的是返回的数据不直接输出</span></div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line"><span class="comment">// 执行该会话，并保存到 $content</span></div><div class="line">$content = curl_exec($ch);</div><div class="line"><span class="comment">// 关闭该会话                   </span></div><div class="line">curl_close($ch);</div><div class="line"><span class="comment">// 输出抓取的网页</span></div><div class="line"><span class="keyword">echo</span> $content;</div></pre></td></tr></table></figure></p>
<p><strong>使用post方式</strong><br>通过 <code>get</code> 方式获取时，可以直接在 <code>$url</code> 中直接写入。而当需要使用 <code>post</code> 方式获取数据时，需要通过以下设置来开启 post 并设置 post 的数据。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启 post</span></div><div class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</div><div class="line"><span class="comment">// 设置 post 的数据  </span></div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</div></pre></td></tr></table></figure>
<p>其中的 <code>$data</code> 即是需要 post 的数据。</p>
<p><strong>设置header</strong><br>有些网页需要在请求中包含头信息，否则将抓取不到你需要的信息，那么可以通过下面的代码来设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 头信息数组</span></div><div class="line">$header = <span class="keyword">array</span>(</div><div class="line">		<span class="string">"Host: www.ahonn.me"</span>,</div><div class="line">		<span class="string">"Accept: text/html, application/xhtml+xml, image/jxr, */*"</span>,</div><div class="line">		<span class="string">"User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36"</span></div><div class="line">);</div><div class="line"><span class="comment">// 设置header</span></div><div class="line">curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</div></pre></td></tr></table></figure></p>
<p>设置头信息可以通过数组的形式，然后通过设置 <code>CURLOPT_HTTPHEADER</code> 来加入头信息。也可以单个去设置，例如</p>
<ul>
<li><code>CURLOPT_USERAGENT</code>：设置 User-Agent</li>
<li><code>CURLOPT_REFERER</code>：设置 Referer</li>
</ul>
<p>等等</p>
<p><strong>设置cookie</strong><br>有些网页需要登录后才可以抓取到，这时候就需要使用 cookie 来模拟登录。设置 cookie 可以在上面的 $header 数组中与头信息设置相同的方法来将 cookie 加入。也可以使用下面的 <code>curl_setpot</code> 选项来设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置 cookie，$cookie 是一个字符串</span></div><div class="line">curl_setopt($ch, CURLOPT_COOKIE, $cookie);</div></pre></td></tr></table></figure></p>
<p>也可以通过文件的形式将 cookie 写入：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl_setopt($ch, CURLOPT_COOKIEFILE, $cookiefile);</div></pre></td></tr></table></figure></p>
<p><strong>禁用SSL验证</strong><br>有时候在抓取 Https 链接的时候以正常的方式去抓取会报错，此时需要在 cURL 会话中设置:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</div><div class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p>通过上面的设置，可以禁用SSL证书的验证。</p>
<p>以上即是目前我已经简单使用过的 cURL 库的内容，cURL 库还可以实现多线程抓取，实现 IP 代理等。其他内容会在之后的使用中学习到。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter URL 路由]]></title>
      <url>http://www.ahonn.me/2015/12/19/codeigniter-url-routes/</url>
      <content type="html"><![CDATA[<h2 id="设置-URL-路由规则"><a href="#设置-URL-路由规则" class="headerlink" title="设置 URL 路由规则"></a>设置 URL 路由规则</h2><p>CodeIgniter 中的 URL 一般遵循之前说的下面这种规则：<br>    <a href="http://example.com/index.php/controllers/method/arguments" target="_blank" rel="external">http://example.com/index.php/controllers/method/arguments</a></p>
<p>但是有些原因会使得我们需要使用不同的规则去让 URl 映射。</p>
<p>当有这种需求的时候，可以在 <code>application/config/router.php</code> 的 <code>$route</code> 数组中设置需要的路由规则，在路由规则中可以使用通配符或正则表达式。</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>使用通配符的路由规则：<br>    $route[‘name/:num’] = ‘foo/bar’;<br><a id="more"></a></p>
<p>在路由规则数组 <code>$route</code> 中，数组的 key 表示要匹配的 URL ，数组的 value 表示重定向的位置。</p>
<p>可以使用纯字符串去匹配，或者是使用下列两种通配符：</p>
<ul>
<li>(:num)    匹配数字：对应正则表达式中的 [0-9]+ ，即匹配1到多个数字</li>
<li>(:any)    匹配任意字符：对于正则表达式中 [^/]+ ，即匹配1到多个除<code>/</code>外的字符</li>
</ul>
<p>在 <code>$route</code> 数组中，前面的规则优先于后面的规则，就是说它是按照数组顺序匹配的，当匹配到规则时就不会继续匹配后面的规则了。</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>使用正则表达式的路由规则：<br>    $route[‘name/([a-z]+)/(\d+)’] = ‘$1/$2’;</p>
<p>当访问类似 <code>name/foo/233</code> 这样的 URL 的时候会被重定向到 <code>foo/233</code>。$1、$2 表示被匹配到的第几个字符串。</p>
<h2 id="保留路由"><a href="#保留路由" class="headerlink" title="保留路由"></a>保留路由</h2><p><code>$route[&#39;default_controller&#39;] = &#39;welcome&#39;;</code> ：默认的控制器。</p>
<p><code>$route[&#39;404_override&#39;] = &#39;&#39;;</code> ：当页面不存在时访问的控制器。</p>
<p><code>$route[&#39;translate_uri_dashes&#39;] = FALSE;</code> ：这是一个路由设置，不是规则，表示是否把 URL 中的 <code>-</code> 替换为 <code>_</code>。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CodeIgniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter MVC简单示例]]></title>
      <url>http://www.ahonn.me/2015/12/13/codeigniter-simple-example-with-mvc/</url>
      <content type="html"><![CDATA[<blockquote>
<p>通过使用 CodeIgniter 写一个 Hello World 程序来学习框架的基本使用。</p>
</blockquote>
<p>默认该 Hello World 程序放在 Apache 服务器的 <code>www</code> 目录下。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>在 Codelgniter 中只有单一的程序入口 index.php，之前说过它是 MVC 架构的框架，所以通常在 URL 中来确定使用的控制器及方法。</p>
<p>例如：<br>    <a href="http://example.com/index.php/controllers/method/arguments" target="_blank" rel="external">http://example.com/index.php/controllers/method/arguments</a></p>
<p><code>controllers</code>表示调用的控制器的类，<code>method</code>表示调用的类中的函数或方法，<code>argument</code>以及后面的表示传给控制器的参数。</p>
<a id="more"></a>
<p>在开启 Apache 服务器的 <code>mod_rewirite</code> 模块下可以添加一个 <code>.htaccess</code> 文件隐藏 <code>index.php</code>，使得 URL 变成 <code>http://example.com/index.php/controllers/method/arguments</code></p>
<p>.htaccess<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line">RewriteRule ^(.*)$ index.php/$1 [L]</div></pre></td></tr></table></figure></p>
<h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h2><p>控制器是一个类文件，存放在 <code>application/controllers</code> 下，通过 URL 关联来访问，一般 URL 中访问的控制器名与控制器的文件名，类名相同。</p>
<p><strong>控制器类文件的文件名必须使用大写字母开头，类中的类名与文件名相同</strong></p>
<p>当 <code>controllers</code> 为空时，将会调用默认的控制器，安装完成 CodeIgniter 后默认的控制器是 <code>welcome</code>。可以通过修改 <code>application/config/routes.php</code> 文件中的 <code>$route[&#39;default_controller&#39;]</code> 来设置默认的控制器。</p>
<p>当 URL 中<code>method</code>为空时，会默认调用<code>index()</code>，不为空时则调用控制器类中的想对应的方法。</p>
<p>当 URL 中存在<code>controllers</code>与<code>method</code>时，其余后面的会当做参数去接收。</p>
<p>在 <code>application/controllers</code> 下创建 <code>HelloWorld.php</code>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">'Hello World'</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">($message)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">echo</span> $message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过 <a href="http://localhost/index.php/HelloWorld" target="_blank" rel="external">http://localhost/index.php/HelloWorld</a> 来调用<code>HelloWorld</code>控制器中的<code>index()</code>。</p>
<p>或者通过 <a href="http://localhost/index.php/HelloWorld/say/HelloWorld" target="_blank" rel="external">http://localhost/index.php/HelloWorld/say/HelloWorld</a> 来调用<code>say</code>方法打印后面的参数<code>HelloWorld</code>。</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>视图简单来说就是一个 Web 页面，或者是页面的一部分。视图在 MVC 模式中不是直接被调用的，是通过控制器加载，来显示特定的视图。</p>
<p>在控制器中使用 <code>$this-&gt;load-&gt;view(&#39;name&#39;)</code> 加载制定的视图。如果需要添加动态内容，可以通过视图加载方法的第二个参数向视图传入数据。<strong>传入的参数是一个数组或者对象。</strong></p>
<p>在 <code>application/views</code> 下创建 <code>HelloWorld.php</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span> Hello World <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="php"><span class="meta">&lt;?</span>= $message; <span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>再将 <code>application/controllers</code> 下的 <code>HelloWorld.php</code> 修改为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		$data[<span class="string">'message'</span>] = <span class="string">'Hello World'</span>;</div><div class="line">		<span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'HelloWorld'</span>, $data);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过访问 <a href="http://localhost/index.php/HelloWorld" target="_blank" rel="external">http://localhost/index.php/HelloWorld</a> 来调用<code>HelloWorld</code>控制器中的 <code>index()</code> 加载名为 <code>HelloWorld</code> 的视图，并为视图添加默认的动态数据 <code>Hello World</code>。</p>
<h2 id="Medel"><a href="#Medel" class="headerlink" title="Medel"></a>Medel</h2><p>模型在 MVC 模式中是专门处理数据的，对数据库的操作等都在模型类中实现。当多个控制器需要使用同一个方式处理或者获取数据时，就实现了代码复用。</p>
<p>模型一般在控制器中加载并调用，使用 <code>$this-&gt;load-&gt;model(&#39;model_name&#39;)</code> 来加载，与控制器不同的是，模型的类文件名与类名都要有 <code>_model</code> 后缀。然后在控制器中可以通过 <code>$this-&gt;model_name-&gt;method()</code> 来调用模型中的方法。</p>
<p>如果有一个模型在整个程序中都需要使用，那么可以通过在 <code>application/config/autoload.php</code> 文件中将模型添加到 <code>$autoload[&#39;model&#39;]</code> 中。</p>
<p>在 <code>application/models</code> 中添加 <code>HelloWorld_model.php</code>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_model</span> <span class="keyword">extends</span> <span class="title">CI_Model</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_message</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">'Hello World'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后将<code>application/controllers</code> 下的 <code>HelloWorld.php</code> 修改为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'HelloWorld'</span>);</div><div class="line">		$data[<span class="string">'message'</span>] = <span class="keyword">$this</span>-&gt;HelloWorld-&gt;get_message();</div><div class="line">		<span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'HelloWorld'</span>, $data);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一个简单的使用了 MVC 模式的 Hello World 程序就完成了。</p>
<p>可以通过访问 <a href="http://localhost/index.php/HelloWorld" target="_blank" rel="external">http://localhost/index.php/HelloWorld</a> 来查看，虽然使用了 M 跟 V 之后所显示的页面与只使用 C 的显示是一样的，这是由于在这个简单的 Hello World 程序中没有实际到比较复杂的过程，MVC 在实际使用中可以很好的解耦，使得代码大量复用，也易于程序分层。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CodeIgniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter 框架概述]]></title>
      <url>http://www.ahonn.me/2015/12/11/an-overview-of-the-codeigniter/</url>
      <content type="html"><![CDATA[<blockquote>
<p>虽然已经学习 CodeIgniter 框架有一段时间了，但是想想还是从头开始学习一下这个轻框架，随便将学习的过程记录下来。</p>
</blockquote>
<h2 id="CodeIgniter-是什么？"><a href="#CodeIgniter-是什么？" class="headerlink" title="CodeIgniter 是什么？"></a>CodeIgniter 是什么？</h2><p>想知道 CodeIgniter 是个什么东西，首先得明白什么是框架。</p>
<p>框架可以看成是一个半完成的应用程序，大多数需要用到的功能都被封装好，并将整个应用程序分成若干互不相干的层次，减少了各个功能间的耦合性，使代码更容易管理跟维护。在设计模式中，为框架给出了一个定义：“框架就是一组协同工作的类，它们为特定类型的软件构筑了一个可重用的设计。”</p>
<p>在 CodeIgniter 的官方文档上说，该框架包含了一些非常小的库，库都是根据请求动态加载的，所以 CodeIgniter 是一个非常轻量级的框架，相对于不使用框架的 PHP 应用程序，而使用了 CodeIgniter 框架的是简单的实现了 MVC 架构，并降低了代码间的耦合性，更便于维护与修改。</p>
<p>对于正准备接触框架的PHPer，CodeIgniter 是一个不错的选择。</p>
<a id="more"></a>
<h2 id="应用程序流程"><a href="#应用程序流程" class="headerlink" title="应用程序流程"></a>应用程序流程</h2><ul>
<li><p>CodeIgniter 应用程序是单一入口的，所有的请求都是通过 index.php 去接收，index.php 还是初始化各种基本资源的地方。</p>
</li>
<li><p>通过 index.php 接收的 HTTP 请求会在 Router 检查，确定该将请求发向哪个控制器的哪个方法中。</p>
</li>
<li><p>如果在 cache 中存在缓存文件的话，直接向浏览器输出缓存的视图。</p>
</li>
<li><p>在加载控制器前，CodeIgniter 会对 HTTP 请求及所有提交的数据进行安全检查。</p>
</li>
<li><p>控制器加载模型，类库，使用到的函数后，处理请求所需要的资源。</p>
</li>
<li><p>渲染视图发送到浏览器显示，若开启缓存，视图还会在 cache 中保持起来用于后面的请求。</p>
</li>
</ul>
<h2 id="MVC-设计模式"><a href="#MVC-设计模式" class="headerlink" title="MVC 设计模式"></a>MVC 设计模式</h2><ul>
<li><p>M 模型，代表数据结构，通常是对数据库进行操作的类。是程序需要操作的信息或者数据。</p>
</li>
<li><p>V 视图，是展示给用户看的信息，通常是程序的外壳，可以理解为整个程序的前端。</p>
</li>
<li><p>C 控制器，是 M 和 V 之间的中介，收到请求后去 M 中取得数据，再返回到 V 中展示出来。用于控制应用程序的流程。</p>
</li>
</ul>
<blockquote>
<p>在 CodeIgniter 中 Model 不是必须的，在一定情况下可以不用 Model 层。</p>
</blockquote>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">|-- application	项目目录</div><div class="line">	|-- cache	视图缓存文件</div><div class="line">	|-- config	配置文件</div><div class="line">	|-- controllers	MVC 模式中的控制器，继承CI_Controller</div><div class="line">	|-- core 	核心程序</div><div class="line">	|-- helpers	项目辅助函数</div><div class="line">	|-- hooks	钩子，无需修改核心文件扩展系统</div><div class="line">	|-- language 语言包</div><div class="line">	|-- libraries	通用类库</div><div class="line">	|-- logs	日志</div><div class="line">	|-- models	MVC 模式中的模型，继承CI_Model</div><div class="line">	|-- third_party	第三方库</div><div class="line">	|-- views	MVC 模式中的视图</div><div class="line">|-- system	框架程序</div><div class="line">	|-- core 	核心程序</div><div class="line">	|-- database	数据库操作</div><div class="line">	|-- fonts	字库</div><div class="line">	|-- helpers	辅助函数</div><div class="line">	|-- language	语言包</div><div class="line">	|-- libraries	通用类库</div><div class="line">|-- index.php 应用程序入口</div></pre></td></tr></table></figure>
<h2 id="框架思想"><a href="#框架思想" class="headerlink" title="框架思想"></a>框架思想</h2><p>在最小化，最轻量级的开发包中得到最大的执行效率、功能和灵活性。</p>
<p>简洁，轻量，高效。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CodeIgiter </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知乎用户动态监控爬虫]]></title>
      <url>http://www.ahonn.me/2015/11/25/the-crawler-of-zhihu-user-dynamic-monitoring/</url>
      <content type="html"><![CDATA[<blockquote>
<p>根据极客学院的Python爬虫教程写的一个单线程简易爬虫。可以监控知乎用户动态，当有新动态时发送邮件通知。</p>
</blockquote>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li>根据要关注的知乎用户的主页URL，使用requests模块获取整个用户主页的html。</li>
<li>根据用户主页及其html代码，定位所需要的最新动态的位置。</li>
<li>使用正则表达式比配到需要的数据。</li>
<li>拼接数据，判断是否已经保持在文件中，即判断是否为新动态。</li>
<li>若是新动态，使用python的smtplib模块发送收件到设置的邮箱中并保存到本地文件，否则略过。</li>
</ul>
<a id="more"></a>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p><code>os</code><br><code>time</code><br><code>re</code><br><code>sys</code><br><code>MIMEText</code><br><code>requests</code><br><code>smtplib</code><br><!--more--></p>
<h4 id="zhihu类：获取与匹配，保持内容"><a href="#zhihu类：获取与匹配，保持内容" class="headerlink" title="zhihu类：获取与匹配，保持内容"></a>zhihu类：获取与匹配，保持内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">class zhihu(object):</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        # 设置关注的知乎用户</div><div class="line">        self.url = &quot;http://www.zhihu.com/people/xxxx&quot;</div><div class="line">        # 设置request header</div><div class="line">        self.header = &#123;</div><div class="line">            &apos;Host&apos; : &apos;www.zhihu.com&apos;,</div><div class="line">            &apos;Connection&apos; : &apos;Keep-Alive&apos;,</div><div class="line">            &apos;Accept&apos; : &apos;text/html, application/xhtml+xml, image/jxr, */*&apos;,</div><div class="line">            &apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36&apos;,</div><div class="line">            &apos;Referer&apos;: self.url</div><div class="line">        &#125;</div><div class="line">        # 设置登录的Cookie</div><div class="line">        self.cookie = &#123;</div><div class="line">            &apos;Cookie&apos; : &apos;&apos;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    # 获取知乎用户的主页HTML</div><div class="line">    def getHTML(self):</div><div class="line">        html = requests.get(self.url, headers = self.header, cookies = self.cookie).content</div><div class="line">        return html</div><div class="line"></div><div class="line">    # 获取最新动态</div><div class="line">    def getContent(self, html):</div><div class="line">        self.name = re.findall(&apos;&lt;span class=&quot;name&quot;&gt;(.*?)&lt;/span&gt;&apos;, html, re.S)[0]</div><div class="line">        content = re.findall(&apos;&lt;div class=&quot;zm-profile-section-main zm-profile-section-activity-main zm-profile-activity-page-item-main&quot;&gt;(.*?)&lt;/div&gt;&apos;, html, re.S)</div><div class="line">        return content</div><div class="line"></div><div class="line">    # 获取每一条最新动态</div><div class="line">    def getText(self, contents):</div><div class="line">        data = &#123;&#125;</div><div class="line">        data[&apos;href&apos;] = re.findall(&apos;href=&quot;/question/(.*?)&quot;&apos;, contents, re.S)</div><div class="line">        data[&apos;question&apos;] = re.findall(&apos;&lt;a class=&quot;question_link&quot; .*?&quot;&gt;(.*?)&lt;/a&gt;&apos;, contents, re.S)</div><div class="line">        restr = &apos;&quot;&gt;&apos;+ self.name +&apos;&lt;/a&gt;(.*?)\n\n&lt;a&apos;</div><div class="line">        data[&apos;action&apos;] = re.findall(restr, contents, re.S)</div><div class="line">        text = self.name + data[&apos;action&apos;] + &apos;: &apos; +  data[&apos;question&apos;] + &apos; http://www.zhihu.com/question/&apos;+ data[&apos;href&apos;] + &apos;\n&apos;</div><div class="line">        return text</div><div class="line"></div><div class="line">    # 保存到文本</div><div class="line">    def toSave(self, text):</div><div class="line">        f = open(&apos;zhihu.txt&apos;, &apos;a&apos;)</div><div class="line">        f.write(text)</div><div class="line">        f.close()</div><div class="line"></div><div class="line">    # 检查动态是否已记录</div><div class="line">    def toCheck(self, text):</div><div class="line">        f = open(&apos;zhihu.txt&apos;, &apos;r&apos;)</div><div class="line">        existzhihu = f.readlines()</div><div class="line">        if text in existzhihu:</div><div class="line">            return False</div><div class="line">        else:</div><div class="line">            return True</div></pre></td></tr></table></figure>
<h4 id="mail类：发送邮件"><a href="#mail类：发送邮件" class="headerlink" title="mail类：发送邮件"></a>mail类：发送邮件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class mail(object):</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        #邮件服务器地址，需要打开smtp</div><div class="line">        self.mail_host = &quot;smtp.xxx.cn&quot;</div><div class="line">        #邮件账号</div><div class="line">        self.mail_user = &quot;&quot;</div><div class="line">        #邮箱密码</div><div class="line">        self.mail_pass = &quot;&quot;</div><div class="line">        #邮箱后缀</div><div class="line">        self.mail_postfix = &quot;xxx.com&quot;</div><div class="line"></div><div class="line">    def sendMail(self, toList, sub, content):</div><div class="line">        #发信人</div><div class="line">        me = &quot;zhihu spider&quot; + &quot;&lt;&quot; + self.mail_user + &quot;@&quot; + self.mail_postfix + &quot;&gt;&quot;</div><div class="line">        msg = MIMEText(content, _subtype=&apos;plain&apos;, _charset=&apos;utf-8&apos;)</div><div class="line">         #邮件标题</div><div class="line">        msg[&apos;Subject&apos;] = sub</div><div class="line">        #邮件发送人</div><div class="line">        msg[&apos;From&apos;] = me</div><div class="line">        #邮件收件人</div><div class="line">        msg[&apos;To&apos;] = &quot;;&quot;.join(toList)</div><div class="line">        try:</div><div class="line">            server = smtplib.SMTP()</div><div class="line">            #连接服务器</div><div class="line">            server.connect(self.mail_host)</div><div class="line">            #登录邮箱</div><div class="line">            server.login(self.mail_user,self.mail_pass)</div><div class="line">            #发送邮件</div><div class="line">            server.sendmail(me, toList, msg.as_string())</div><div class="line">            server.close()</div><div class="line">            return True</div><div class="line">        except Exception, e:</div><div class="line">            print str(e)</div><div class="line">            return False</div></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    # 设置收件人邮箱</div><div class="line">    mailToList = [&apos;xxx@xxx.com&apos;]</div><div class="line">    zhihu = zhihu();</div><div class="line">    while True:</div><div class="line">        html = zhihu.getHTML()</div><div class="line">        content = zhihu.getContent(html)</div><div class="line">        # 若没有动态记录，爬取所有动态，并保存</div><div class="line">        if not os.path.exists(&apos;zhihu.txt&apos;):</div><div class="line">            for contents in content:</div><div class="line">                text = zhihu.getText(contents)</div><div class="line">                zhihu.toSave(text)</div><div class="line">        else:</div><div class="line">            text = zhihu.getText(content[0])</div><div class="line">            print text</div><div class="line">            # 检查是否存在记录， 不存在则发送邮件，并保存到文件</div><div class="line">            if zhihu.toCheck(text):</div><div class="line">                if mail().sendMail(mailToList, &quot;知乎动态&quot;, text):</div><div class="line">                    zhihu.toSave(text)</div><div class="line">                    print &quot;发生成功&quot;</div><div class="line">                else:</div><div class="line">                    print &quot;发送失败&quot;</div><div class="line">            else:</div><div class="line">                print &quot;pass&quot;</div><div class="line">            # 每隔2分钟运行一次，检查新动态</div><div class="line">            time.sleep(120)</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个简单的爬虫目前还没有办法同时关注很多用户，然后对ip也没有进行代理，爬取过于频繁的话可能会被封ip而爬取不到。</p>
<p>在爬取知乎的过程中发现如果没有header,可能返回的html页面不是用户的主页。然后如果没有登录的话，看到的知乎用户的主页刷新缓慢。需要模拟登录后才能够实时刷新出新动态。</p>
<p>同时使用的是re库正则匹配内容，在使用上不是很方便。但是对xpath又不是很熟，所以暂时使用正则取匹配。</p>
<p>之前还有看到一个解析html内容的模块叫BeautifulSoup，准备去学习学习。然后打算下次使用pythopn的爬虫框架Scrapy来写更多功能的知乎爬虫。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 知乎 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phpmyadmin 缺少 mcrypt 扩展]]></title>
      <url>http://www.ahonn.me/2015/11/22/phpmyadmin-lack-mcrypt-extension/</url>
      <content type="html"><![CDATA[<blockquote>
<p>记录，以便下次所需。</p>
</blockquote>
<p>今天重装了腾讯云上面的服务器，安装的是Ubuntu server 14.04。搞完apache2 + mysql + PHP 后，安装了phpmyadmin来作为数据库管理。<br>登录之后发现报错：缺少 mcrypt 扩展。上网查了一下，发现需要安装php-mcrypt、libmcrypt、libmcrypt-devel这三个。</p>
<h4 id="安装mcrypt"><a href="#安装mcrypt" class="headerlink" title="安装mcrypt"></a>安装mcrypt</h4><pre><code>sudo apt-get install php-mcrypt libmcrypt libmcrypt-devel
</code></pre><p>安装后重启apache2服务器后发现依然报错，后面在网上找到了解决办法。原来是在<code>/etc/php5/apache2/conf.d</code>下缺少一个<code>20-mcrypt.ini</code>。该文件是<code>mcrypt.ini</code>的链接。<br>但是不知道是不是因为是版本不同的关系，这个文件的路径与搜索到的解决方案中不同。我的路径是：<code>/etc/php5/mods-available/mcrypt.ini</code><br><a id="more"></a></p>
<h4 id="链接mcrypt-ini"><a href="#链接mcrypt-ini" class="headerlink" title="链接mcrypt.ini"></a>链接mcrypt.ini</h4><pre><code>sudo ln -s /etc/php5/mods-available/mcrypt.ini 20-mcrypt.ini
</code></pre><p>这次重启apache2服务器后不报错了。</p>
<h4 id="重启apache2"><a href="#重启apache2" class="headerlink" title="重启apache2"></a>重启apache2</h4><pre><code>sudo service apache2 restart
</code></pre>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 验证码识别2]]></title>
      <url>http://www.ahonn.me/2015/11/12/php-captcha-identification-II/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与之前的位置固定的验证码相比，位置不固定的验证码在分割字符这一步步骤难度有所增加。这次增加了验证码的背景颜色亮度判断，使得预处理过后的验证码是黑白二色图，分割字符时根据它们的宽高取剪切。</p>
</blockquote>
<h3 id="获取验证码的背景颜色亮度"><a href="#获取验证码的背景颜色亮度" class="headerlink" title="获取验证码的背景颜色亮度"></a>获取验证码的背景颜色亮度</h3><p>通过统计验证码中各个颜色像素的数量，取最大比例的像素颜色为背景颜色，然后根据阀值，判断颜色的亮度。</p>
<p>在这里可能出现验证码内字符的颜色像素为最大比例，可能会导致后面无法获取各个字符的宽度。这个情况在预处理中加入了处理，</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取背景颜色亮度</div><div class="line"> * <span class="doctag">@method</span> getBgBright</div><div class="line"> * <span class="doctag">@param</span>  image     $img 验证码图像</div><div class="line"> * <span class="doctag">@return</span> boolean    背景颜色亮度</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBgBright</span><span class="params">($img)</span></span></div><div class="line">&#123;</div><div class="line">    $max = <span class="number">0</span>;</div><div class="line">    $bgRgb = <span class="keyword">null</span>;</div><div class="line">    $color = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="comment">//获取验证码中背景颜色RGB索引</span></div><div class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; <span class="keyword">$this</span>-&gt;width; $x++) &#123;</div><div class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; <span class="keyword">$this</span>-&gt;height; $y++) &#123;</div><div class="line">            $index = imagecolorat($img, $x, $y);</div><div class="line">            @$color[$index]++;</div><div class="line">            <span class="keyword">if</span>($color[$index] &gt; $max)&#123;</div><div class="line">                $max = $color[$index];</div><div class="line">                $bgRgb = $index;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取背景RGB颜色</span></div><div class="line">    $bgRgbArray = imagecolorsforindex($img, $bgRgb);</div><div class="line">    <span class="comment">//与亮度阀值对比</span></div><div class="line">    <span class="keyword">if</span> ($bgRgbArray[<span class="string">'red'</span>] + $bgRgbArray[<span class="string">'green'</span>] + $bgRgbArray[<span class="string">'blue'</span>] &gt; BRIGHT) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="预处理图像，转化为黑白二色图"><a href="#预处理图像，转化为黑白二色图" class="headerlink" title="预处理图像，转化为黑白二色图"></a>预处理图像，转化为黑白二色图</h3><p>这里添加了两个默认参数，第一个参数<code>$imgPath</code>是处理样本验证码的时候所要传的验证码的路径，第二个参数<code>$bgBright</code>是当分割字符时无法判断字符宽度的时候，对背景图片亮度取反的操作开关。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图像预处理：移除图像背景，转换位黑白二色图</div><div class="line"> * <span class="doctag">@method</span> removeBackgroud</div><div class="line"> * <span class="doctag">@param</span>  string          $imgPath 验证码文件夹路径</div><div class="line"> * <span class="doctag">@return</span> image          黑白二色验证码图像</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeBackgroud</span><span class="params">($imgPath = null, $bgBright = <span class="number">1</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//传入其他图像路径时，处理其他图像</span></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($imgPath))&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;image = $imgPath;</div><div class="line">        <span class="keyword">$this</span>-&gt;size = getimagesize($imgPath);</div><div class="line">        <span class="keyword">$this</span>-&gt;type = <span class="keyword">$this</span>-&gt;size[<span class="string">'mime'</span>];</div><div class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;size[<span class="number">0</span>];</div><div class="line">        <span class="keyword">$this</span>-&gt;height = <span class="keyword">$this</span>-&gt;size[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/png'</span>) &#123;</div><div class="line">        $img = imagecreatefrompng(<span class="keyword">$this</span>-&gt;image);</div><div class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/jpeg'</span>) &#123;</div><div class="line">        $img = imagecreatefromjpeg(<span class="keyword">$this</span>-&gt;image);</div><div class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/gif'</span>) &#123;</div><div class="line">        $img = imagecreatefromgif(<span class="keyword">$this</span>-&gt;image);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $white = imagecolorallocate($img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</div><div class="line">    $black = imagecolorallocate($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//修正背景颜色亮度</span></div><div class="line">    <span class="keyword">if</span>($bgBright) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;bgBright = <span class="keyword">$this</span>-&gt;getBgBright($img);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;bgBright = !<span class="keyword">$this</span>-&gt;bgBright;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//对图像中的像素替换为黑白</span></div><div class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; <span class="keyword">$this</span>-&gt;width; $x++) &#123;</div><div class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; <span class="keyword">$this</span>-&gt;height; $y++) &#123;</div><div class="line">            $rgb = imagecolorat($img, $x, $y);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getBright($img, $x, $y) == <span class="keyword">$this</span>-&gt;bgBright) &#123;</div><div class="line">                imagesetpixel($img, $x, $y, $white);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                imagesetpixel($img, $x, $y,$black);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $img;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分割验证码字符"><a href="#分割验证码字符" class="headerlink" title="分割验证码字符"></a>分割验证码字符</h3><p>根据预处理后的图像像素分布，确定单个字符的宽高，进行剪切。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 横向剪切单字符验证码图像</div><div class="line"> * <span class="doctag">@method</span> removeBlankY</div><div class="line"> * <span class="doctag">@param</span>  image       $img   待剪切的验证码图像</div><div class="line"> * <span class="doctag">@param</span>  int       $width 待剪切的验证码图像宽度</div><div class="line"> * <span class="doctag">@return</span> image       剪切后的验证码图像</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeBlankY</span><span class="params">($img, $width)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取单个验证码字符的字符高度上界</span></div><div class="line">    <span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; <span class="keyword">$this</span>-&gt;height; $y++) &#123;</div><div class="line">        <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; $width; $x++) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;getBright($img, $x, $y)) &#123;</div><div class="line">                $start = $y;</div><div class="line">                <span class="keyword">break</span> <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取单个验证码字符的字符高度下界</span></div><div class="line">    <span class="keyword">for</span> ($y = <span class="keyword">$this</span>-&gt;height - <span class="number">1</span>; $y &gt;= <span class="number">0</span>; $y--) &#123;</div><div class="line">        <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; $width; $x++) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;getBright($img, $x, $y)) &#123;</div><div class="line">                $end = $y;</div><div class="line">                <span class="keyword">break</span> <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//根据字符高度横向剪切验证码</span></div><div class="line">    $height = $end - $start +<span class="number">1</span>;</div><div class="line">    $subImg = imagecreatetruecolor($width, $height);</div><div class="line">    imagecopy($subImg, $img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, $start, $width, $height);</div><div class="line">    <span class="keyword">return</span> $subImg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * //获取每列像素中黑色像素的数量</div><div class="line"> * <span class="doctag">@method</span> getWeightlist</div><div class="line"> * <span class="doctag">@param</span>  [type]        $img [description]</div><div class="line"> * <span class="doctag">@return</span> [type]        [description]</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWeightlist</span><span class="params">($img)</span></span></div><div class="line">&#123;</div><div class="line">    $weightlist = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; <span class="keyword">$this</span>-&gt;width; $x++) &#123;</div><div class="line">        $count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; <span class="keyword">$this</span>-&gt;height; $y++) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getBright($img, $x, $y)) &#123;</div><div class="line">                $count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        array_push($weightlist, $count);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $weightlist;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 分割验证码单个字符</div><div class="line"> * <span class="doctag">@method</span> splitImage</div><div class="line"> * <span class="doctag">@param</span>  image     $img 预处理过的验证码图像</div><div class="line"> * <span class="doctag">@return</span> array     单字符验证码数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">splitImage</span><span class="params">($img)</span></span></div><div class="line">&#123;</div><div class="line">    $size = <span class="number">0</span>;</div><div class="line">    $subImgs = <span class="keyword">array</span>();</div><div class="line">    $weightlist = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    $weightlist = <span class="keyword">$this</span>-&gt;getWeightlist($img);</div><div class="line">    <span class="comment">//修正预处理图片</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($weightlist); $i++) &#123;</div><div class="line">        <span class="keyword">if</span>($weightlist[$i] &gt; <span class="number">0</span>) &#123;</div><div class="line">            $size++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($size == count($weightlist)) &#123;</div><div class="line">            $img = <span class="keyword">$this</span>-&gt;removeBackgroud(<span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">            $weightlist = <span class="keyword">$this</span>-&gt;getWeightlist($img);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($weightlist);) &#123;</div><div class="line">        $length = <span class="number">0</span>;</div><div class="line">        <span class="comment">//获取每个字符的宽度</span></div><div class="line">        <span class="keyword">while</span>($weightlist[$i++] &gt; <span class="number">1</span>) &#123;</div><div class="line">            $length++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//根据宽度大小分割验证码</span></div><div class="line">        <span class="keyword">if</span> ($length &gt; <span class="number">12</span>) &#123;</div><div class="line">            $width = floor($length/<span class="number">2</span>);</div><div class="line">            $height = <span class="keyword">$this</span>-&gt;height;</div><div class="line"></div><div class="line">            $subImg1 = imagecreatetruecolor($width, $height);</div><div class="line">            imagecopy($subImg1, $img, <span class="number">0</span>, <span class="number">0</span>, $i-$length<span class="number">-1</span>, <span class="number">0</span>, $width, $height);</div><div class="line">            $imgs1 = <span class="keyword">$this</span>-&gt;removeBlankY($subImg1, $width);</div><div class="line"></div><div class="line">            $subImg2 = imagecreatetruecolor($width, $height);</div><div class="line">            imagecopy($subImg2, $img, <span class="number">0</span>, <span class="number">0</span>, $i-$length/<span class="number">2</span><span class="number">-1</span>, <span class="number">0</span>, $width, $height);</div><div class="line">            $imgs2 = <span class="keyword">$this</span>-&gt;removeBlankY($subImg2, $width);</div><div class="line"></div><div class="line">            array_push($subImgs, $imgs1, $imgs2);</div><div class="line">        &#125; <span class="keyword">elseif</span> ($length &gt; <span class="number">3</span>) &#123;</div><div class="line">            $width = $length;</div><div class="line">            $height = <span class="keyword">$this</span>-&gt;height;</div><div class="line"></div><div class="line">            $subImg3 = imagecreatetruecolor($width, $height);</div><div class="line">            imagecopy($subImg3, $img, <span class="number">0</span>, <span class="number">0</span>, $i-$length<span class="number">-1</span>, <span class="number">0</span>, $width, $height);</div><div class="line">            $imgs = <span class="keyword">$this</span>-&gt;removeBlankY($subImg3, $width);</div><div class="line"></div><div class="line">            array_push($subImgs, $imgs);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $subImgs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="验证码样本获取"><a href="#验证码样本获取" class="headerlink" title="验证码样本获取"></a>验证码样本获取</h3><p>对人工识别的验证码进行处理与分割，使图像与其代表的值关联。方便识别的时的样本载入。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取验证码样本数据</div><div class="line"> * <span class="doctag">@method</span> getTrainData</div><div class="line"> * <span class="doctag">@param</span>  string       $imgPath   人工识别的验证码文件路径</div><div class="line"> * <span class="doctag">@param</span>  string       $trainPath 要生成样本验证码数据的文件路径</div><div class="line"> * <span class="doctag">@return</span> null</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTrainData</span><span class="params">($imgPath, $trainPath)</span></span></div><div class="line">&#123;</div><div class="line">    $index = <span class="number">0</span>;</div><div class="line">    $handler = opendir($imgPath);</div><div class="line">    <span class="keyword">while</span> (($filename = readdir($handler)) !== <span class="keyword">false</span>) &#123;</div><div class="line">        var_dump($filename);</div><div class="line">        <span class="keyword">if</span>($filename != <span class="string">'.'</span> &amp;&amp; $filename != <span class="string">'..'</span>) &#123;</div><div class="line">            <span class="comment">//对人工识别的验证码标本预处理</span></div><div class="line">            $img = <span class="keyword">$this</span>-&gt;removeBackgroud($imgPath.<span class="string">'/'</span>.$filename);</div><div class="line">            <span class="comment">//对预处理后的验证码进行分割</span></div><div class="line">            $subImgList = <span class="keyword">$this</span>-&gt;splitImage($img);</div><div class="line">            <span class="comment">//分别对分割后的验证码标本进行保存</span></div><div class="line">            <span class="keyword">if</span> (count($subImgList) == <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span>; $i++) &#123;</div><div class="line">                    var_dump($filename);</div><div class="line">                    $imageName = substr($filename, $i, <span class="number">1</span>);</div><div class="line">                    imagejpeg($subImgList[$i], $trainPath.<span class="string">'/'</span>.$imageName.<span class="string">'-'</span>.++$index.<span class="string">'.jpg'</span>);</div><div class="line">                    <span class="keyword">echo</span> $trainPath.<span class="string">'/'</span>.$imageName.<span class="string">'-'</span>.$index.<span class="string">'.jpg&lt;br/&gt;'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    closedir($handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>经过尝试，这个验证码识别类还暂时无法识别沾粘在一起，或者字符扭曲的验证码。</p>
<p>依旧觉得写得跟屎一样。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 验证码识别1]]></title>
      <url>http://www.ahonn.me/2015/10/29/php-captcha-identification-I/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PHP简单验证码识别，识别字符大小位置固定，干扰小的验证码。</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>预处理图像：根据颜色深浅度预处理，将一些干扰点去除，将图像转化为黑白两色。</li>
<li>分割验证码：将各个数字分割成单独一个字符的图像。</li>
<li>采集样本：将可能出现的字符采集下来，分成样本图像，图像的名称为该图像的字符。</li>
<li>对比样本：将程序分割出来的图像与样本图像上的像素点做对比，取相似度高的值。</li>
</ul>
<h3 id="预处理图像："><a href="#预处理图像：" class="headerlink" title="预处理图像："></a>预处理图像：</h3><p>设定一个RGB的阀值，低于阀值的像素点替换为白色，高于阀值的替换为黑色。将图像转化为黑白。<br><a id="more"></a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断是否为验证码</div><div class="line"> * <span class="doctag">@param</span>  image $img</div><div class="line"> * <span class="doctag">@param</span>  int $x   </div><div class="line"> * <span class="doctag">@param</span>  int $y   </div><div class="line"> * <span class="doctag">@return</span> boolean  </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isInterfere</span><span class="params">($img, $x, $y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//取得图像指定点颜色的索引值</span></div><div class="line">    $rgb = imagecolorat($img, $x, $y);</div><div class="line">    <span class="comment">//取得索引值的RGB          </span></div><div class="line">    $rgbArray = imagecolorsforindex($img, $rgb);    </div><div class="line"></div><div class="line">    <span class="comment">//与设定的阀值对比，确定是否为验证码部分</span></div><div class="line">    <span class="keyword">if</span> ($rgbArray[<span class="string">'red'</span>] + $rgbArray[<span class="string">'green'</span>] + $rgbArray[<span class="string">'blue'</span>] &gt; <span class="number">100</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 预处理图像</div><div class="line"> * <span class="doctag">@return</span> image  </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeBackgroud</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="comment">//根据图像的类型创建一个新的图像</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/png'</span>) &#123;</div><div class="line">            $img = imagecreatefrompng(<span class="keyword">$this</span>-&gt;image);</div><div class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/jpeg'</span>) &#123;</div><div class="line">            $img = imagecreatefromjpeg(<span class="keyword">$this</span>-&gt;image);</div><div class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;type == <span class="string">'image/gif'</span>) &#123;</div><div class="line">            $img = imagecreatefromgif(<span class="keyword">$this</span>-&gt;image);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//设置替换的颜色值</span></div><div class="line">        $white = imagecolorallocate($img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</div><div class="line">        $black = imagecolorallocate($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//遍历验证码图像的各个像素点</span></div><div class="line">        <span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; <span class="keyword">$this</span>-&gt;width; ++$x) &#123;</div><div class="line">            <span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; <span class="keyword">$this</span>-&gt;height; ++$y) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isInterfere($img, $x, $y)) &#123;</div><div class="line">                    imagesetpixel($img, $x, $y, $black);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    imagesetpixel($img, $x, $y, $white);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $img;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分割验证码"><a href="#分割验证码" class="headerlink" title="分割验证码"></a>分割验证码</h3><p>这里因为位置是固定的所以比较容易分割。网上看的资料说，现在验证码识别的难点就是分割字符这块，有些验证码比较男去分割单个字符。这里这个是最简单的分割字符。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分割字符</div><div class="line"> * <span class="doctag">@param</span>  image $img</div><div class="line"> * <span class="doctag">@return</span> array      </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">splitImage</span><span class="params">($img)</span></span></div><div class="line">&#123;</div><div class="line">    $x = <span class="number">10</span>;</div><div class="line">    $y = <span class="number">6</span>;</div><div class="line">    $width = <span class="number">8</span>;</div><div class="line">    $height = <span class="number">10</span>;</div><div class="line">    $space = <span class="number">1</span>;</div><div class="line">    $subImgs = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">4</span>; $i++) &#123;</div><div class="line">        <span class="comment">//创建单字符的验证码子图像</span></div><div class="line">        $subImgs[$i] = imagecreatetruecolor($width, $height);</div><div class="line"></div><div class="line">        <span class="comment">//复制验证码上的指定字符到新建图像</span></div><div class="line">        imagecopy($subImgs[$i], $img, <span class="number">0</span>, <span class="number">0</span>, $x, $y, $width, $height);</div><div class="line">        $x += ($width + $space);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $subImgs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="采集样本"><a href="#采集样本" class="headerlink" title="采集样本"></a>采集样本</h3><p>这里需要采集到所有可能出现的字符，对比起英文验证码，中文验证码更难识别。需要将采集到的验证码同样分割成单字符，并将字符的值与其二进制文件一一对应映射。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理标本图像</div><div class="line"> * <span class="doctag">@return</span> array</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadTrainData</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $path = <span class="string">"train/"</span>;</div><div class="line">    $handler = opendir($path);  </div><div class="line">    <span class="keyword">while</span> (($filename = readdir($handler)) !== <span class="keyword">false</span>) &#123;  </div><div class="line">        <span class="keyword">if</span> ($filename != <span class="string">"."</span> &amp;&amp; $filename != <span class="string">".."</span>) &#123;  </div><div class="line">            <span class="comment">//将图像名称与图像资源一一对应</span></div><div class="line">            $sampleMap[substr($filename, <span class="number">0</span>, <span class="number">1</span>)] = imagecreatefromjpeg($path.$filename);</div><div class="line">       &#125;  </div><div class="line">    &#125;</div><div class="line">    closedir($handler);</div><div class="line">    <span class="keyword">return</span> $sampleMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对比样本"><a href="#对比样本" class="headerlink" title="对比样本"></a>对比样本</h3><p>将所要识别的验证码分割出的子单字符图像与样本图像一一对比，像素差距最小的即可能为其值。这种方法在这种简单的验证码中准确率很高。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取单个验证码字符</div><div class="line"> * <span class="doctag">@param</span>  image $img   分割的图像</div><div class="line"> * <span class="doctag">@param</span>  array $sampleMap 标本图像</div><div class="line"> * <span class="doctag">@return</span> string       </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingleChar</span><span class="params">($img, $sampleMap)</span></span></div><div class="line">&#123;</div><div class="line">    $width = imagesx($img);</div><div class="line">    $height = imagesy($img);</div><div class="line">    $min = $width * $height;</div><div class="line">    <span class="comment">//将验证码图像与样本图像一一对比，并获取差异最小的样本的值</span></div><div class="line">    <span class="keyword">foreach</span> ($sampleMap <span class="keyword">as</span> $filename =&gt; $file) &#123;</div><div class="line">        $count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> ($x=<span class="number">0</span>; $x &lt; $width; $x++) &#123;</div><div class="line">            <span class="keyword">for</span> ($y=<span class="number">0</span>; $y &lt; $height; $y++) &#123;</div><div class="line">                <span class="comment">//如果像素点颜色不同，差异值增加</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isInterfere($img, $x, $y) != <span class="keyword">$this</span>-&gt;isInterfere($file, $x, $y)) &#123;</div><div class="line">                    $count++;</div><div class="line">                    <span class="keyword">if</span>($count &gt;= $min)</div><div class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($count &lt; $min) &#123;</div><div class="line">            $min = $count;</div><div class="line">            $result = $filename;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次写简单的验证码识别，接触了很多PHP GD的函数，对于PHP的函数名混乱也有了很深的印象。</p>
<p>其实这个简单的验证码识别中并没有涉及到很多的算法，只是简单的处理图像与分割图像。</p>
<p>还有就是觉得类的设计跟变量名的命名方面还是有待加强。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sudoers is world writable]]></title>
      <url>http://www.ahonn.me/2015/08/30/sudoers-is-world-writable/</url>
      <content type="html"><![CDATA[<blockquote>
<p>记录以避免再次犯错</p>
</blockquote>
<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>今天修改.bashrc中的环境配置时，不小心把$PATH删除了。后来发现后添加回去后Terminal中出现如下错误：</p>
<pre><code>sudo: /etc/sudoers is world writable
sudo: no valid sudoers sources found, quitting
</code></pre><a id="more"></a>
<p>这是因为sudoers的权限不对而出现的问题。</p>
<h2 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h2><p>在网上搜索后知道了解决方法是进入ubuntu的recovery mode将<code>/etc/soduers</code>的权限改为0440.</p>
<p>然而这需要在recovery下使用root帐号，由于我没有设置root密码所以无法解决。</p>
<p>最后终于找到了解决的办法，为了防止下次再次如此麻烦，将其记录下来。</p>
<h4 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h4><ul>
<li>开机按<code>Esc</code>进入GRUB，选择第二项</li>
<li>选择recovery mode（一般是第二项），按<code>e</code>进入编辑</li>
<li>将其中的<code>ro recovery nomodeset</code> 改为 <code>rw single init=/bin/bash</code></li>
<li>按F10，进入单用户模式，即root用户</li>
<li>输入 <code>chomd 0440 /etc/sudoers</code> 修改权限</li>
<li>按Ctrl + Alt + Del 重启</li>
</ul>
<p>重启后就可以使用sudo。这里出现了一个提示，进入/etc目录删除sudoers.d文件夹即可解决。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 下 LAMP环境搭建]]></title>
      <url>http://www.ahonn.me/2015/08/24/ubuntu-lamp-environment-set-up/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install apache2</div></pre></td></tr></table></figure>
<h3 id="安装php模块"><a href="#安装php模块" class="headerlink" title="安装php模块"></a>安装php模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install php5</div></pre></td></tr></table></figure>
<h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install mysql-server</div><div class="line">$ sudo apt-get install mysql-client</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="安装其他模块"><a href="#安装其他模块" class="headerlink" title="安装其他模块"></a>安装其他模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install libapache2-mod-php5</div><div class="line">$ sudo apt-get install libapache2-mod-auth-mysql</div><div class="line">$ sudo apt-get install php5-mysql</div><div class="line">$ sudo apt-get install php5-gd</div></pre></td></tr></table></figure>
<h3 id="测试Apache"><a href="#测试Apache" class="headerlink" title="测试Apache"></a>测试Apache</h3><p>浏览器访问 <a href="http://localhost/" target="_blank" rel="external">http://localhost/</a></p>
<p>页面显示It Works！即为Apache服务器成功安装运行</p>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod 777 /var/www/html</div></pre></td></tr></table></figure>
<h3 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install phpmyadmin</div></pre></td></tr></table></figure>
<p>安装过程选择apache2,输入密码。</p>
<h3 id="测试phpmyadmin"><a href="#测试phpmyadmin" class="headerlink" title="测试phpmyadmin"></a>测试phpmyadmin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln -s /usr/share/phpmyadmin /var/www/html</div></pre></td></tr></table></figure>
<p>浏览器访问 <a href="http://localhost/phpmyadmin" target="_blank" rel="external">http://localhost/phpmyadmin</a>,并登录。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="启用mod-rewrite模块"><a href="#启用mod-rewrite模块" class="headerlink" title="启用mod_rewrite模块"></a>启用mod_rewrite模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo a2enmod rewrite</div></pre></td></tr></table></figure>
<p>启用后重启Apache服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service apache2 restart</div></pre></td></tr></table></figure>
<h3 id="设置Apache支持-htm-html-php"><a href="#设置Apache支持-htm-html-php" class="headerlink" title="设置Apache支持 .htm .html .php"></a>设置Apache支持 .htm .html .php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /etc/apache2/apache2.conf&amp;</div></pre></td></tr></table></figure>
<p>打开并添加：<code>AddType application/x-httpd-php .htm .html .php</code></p>
<h3 id="测试PHP网页"><a href="#测试PHP网页" class="headerlink" title="测试PHP网页"></a>测试PHP网页</h3><p>在/var/www/html下新建mysql_test.php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$link = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"password"</span>);</div><div class="line"><span class="keyword">if</span>(!$link)</div><div class="line">  <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="keyword">echo</span> <span class="string">"Mysql 配置正确!"</span>;</div><div class="line">mysql_close($link);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost/mysql_test.php" target="_blank" rel="external">http://localhost/mysql_test.php</a>，显示“Mysql配置正确”即完成</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
